"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JompxGraphqlType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const appsync = require("@aws-cdk/aws-appsync-alpha");
/**
 * Extend GraphqlType to create a new datatype to include a new typeName property.
 */
class JompxGraphqlType extends appsync.GraphqlType {
    constructor(type, options) {
        var _b;
        super(type, options);
        this.typeName = '';
        this.typeName = (_b = options === null || options === void 0 ? void 0 : options.typeName) !== null && _b !== void 0 ? _b : '';
    }
    static objectType(options) {
        return new JompxGraphqlType(appsync.Type.INTERMEDIATE, options);
    }
    /**
     * Resolve a JompxGraphqlType with string type to a GraphqlType with actual type.
     */
    resolve(schemaTypes) {
        const objectType = schemaTypes.objectTypes[this.typeName];
        if (!objectType)
            throw Error(`Jompx: Type '${this.typeName}' not found for JompxGraphqlType! Add type to schema types`);
        const newGraphqlType = schemaTypes.objectTypes[this.typeName].attribute(this);
        return newGraphqlType;
    }
}
exports.JompxGraphqlType = JompxGraphqlType;
_a = JSII_RTTI_SYMBOL_1;
JompxGraphqlType[_a] = { fqn: "@jompx/constructs.JompxGraphqlType", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbC10eXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NsYXNzZXMvYXBwLXN5bmMvZ3JhcGhxbC10eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0RBQXNEO0FBd0V0RDs7R0FFRztBQUNILE1BQWEsZ0JBQWlCLFNBQVEsT0FBTyxDQUFDLFdBQVc7SUFRckQsWUFBc0IsSUFBa0IsRUFBRSxPQUFpQzs7UUFDdkUsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUhULGFBQVEsR0FBVyxFQUFFLENBQUM7UUFJbEMsSUFBSSxDQUFDLFFBQVEsU0FBRyxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsUUFBUSxtQ0FBSSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQVRNLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBaUM7UUFDdEQsT0FBTyxJQUFJLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFTRDs7T0FFRztJQUNJLE9BQU8sQ0FBQyxXQUF3QjtRQUVuQyxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsVUFBVTtZQUFFLE1BQU0sS0FBSyxDQUFDLGdCQUFnQixJQUFJLENBQUMsUUFBUSw0REFBNEQsQ0FBQyxDQUFDO1FBRXhILE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5RSxPQUFPLGNBQWMsQ0FBQztJQUMxQixDQUFDOztBQXZCTCw0Q0F3QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhcHBzeW5jIGZyb20gJ0Bhd3MtY2RrL2F3cy1hcHBzeW5jLWFscGhhJztcclxuaW1wb3J0IHsgSVNjaGVtYVR5cGUgfSBmcm9tICcuLi8uLi90eXBlcy9hcHAtc3luYyc7XHJcblxyXG4vLyBleHBvcnQgY2xhc3MgSm9tcHhSZXNvbHZhYmxlRmllbGQgZXh0ZW5kcyBhcHBzeW5jLlJlc29sdmFibGVGaWVsZCBpbXBsZW1lbnRzIGFwcHN5bmMuSUZpZWxkIHtcclxuLy8gICAgIHJlYWRvbmx5IGZpZWxkT3B0aW9ucz86IGFwcHN5bmMuUmVzb2x2YWJsZUZpZWxkT3B0aW9ucztcclxuLy8gICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IGFwcHN5bmMuUmVzb2x2YWJsZUZpZWxkT3B0aW9ucykge1xyXG4vLyAgICAgICAgIHN1cGVyKG9wdGlvbnMpO1xyXG4vLyAgICAgICAgIGNvbnN0IHJlc29sdmFibGVGaWVsZCA9IG5ldyBhcHBzeW5jLlJlc29sdmFibGVGaWVsZChvcHRpb25zKTtcclxuLy8gICAgICAgICByZXNvbHZhYmxlRmllbGQuXHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBKb21weFJlc29sdmFibGVGaWVsZCBleHRlbmRzIGFwcHN5bmMuUmVzb2x2YWJsZUZpZWxkIHtcclxuLy8gICAgIHB1YmxpYyBvYmplY3RUeXBlTmFtZSA9ICcnO1xyXG4vLyAgICAgZGVjbGFyZSBmaWVsZE9wdGlvbnM/OiBhcHBzeW5jLlJlc29sdmFibGVGaWVsZE9wdGlvbnM7XHJcbi8vICAgICBjb25zdHJ1Y3RvcihvYmplY3RUeXBlTmFtZTogc3RyaW5nLCBvcHRpb25zOiBhcHBzeW5jLlJlc29sdmFibGVGaWVsZE9wdGlvbnMpIHtcclxuLy8gICAgICAgICBzdXBlcihvcHRpb25zKTtcclxuLy8gICAgICAgICB0aGlzLm9iamVjdFR5cGVOYW1lID0gb2JqZWN0VHlwZU5hbWU7XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCBpbnRlcmZhY2UgTU5vdGVBcHBQcm9wZXJ0eSB7XHJcbi8vICAgICBvYmplY3RUeXBlTmFtZTogc3RyaW5nO1xyXG4vLyB9XHJcblxyXG4vLyBleHBvcnQgY2xhc3MgSm9tcHhHcmFwaHFsVHlwZSBleHRlbmRzIGFwcHN5bmMuR3JhcGhxbFR5cGUge1xyXG4vLyAgICAgc3RhdGljIGpvbXB4VHlwZSh0eXBlTmFtZTogc3RyaW5nLCBvcHRpb25zPzogYXBwc3luYy5CYXNlVHlwZU9wdGlvbnMpOiBhcHBzeW5jLkdyYXBocWxUeXBlICYgTU5vdGVBcHBQcm9wZXJ0eSB7XHJcbi8vICAgICAgICAgY29uc29sZS5sb2codHlwZU5hbWUsIG9wdGlvbnMpO1xyXG4vLyAgICAgICAgIC8vIHJldHVybiAodW5kZWZpbmVkIGFzIHVua25vd24gYXMgYXBwc3luYy5PYmplY3RUeXBlKS5hdHRyaWJ1dGUob3B0aW9ucyk7XHJcbi8vICAgICAgICAgLy8gY29uc3Qgb2JqZWN0VHlwZSA9IG5ldyBhcHBzeW5jLk9iamVjdFR5cGUodHlwZU5hbWUsIHsgZGVmaW5pdGlvbjogeyBkdW1teTogYXBwc3luYy5HcmFwaHFsVHlwZS5zdHJpbmcoKSB9IH0pO1xyXG4vLyAgICAgICAgIC8vIHJldHVybiBvYmplY3RUeXBlLmF0dHJpYnV0ZSgpO1xyXG4vLyAgICAgICAgIC8vIHJldHVybiBhcHBzeW5jLkdyYXBocWxUeXBlLmludGVybWVkaWF0ZSgnJywgb3B0aW9ucyk7XHJcbi8vICAgICAgICAgLy8gcmV0dXJuIHsgLi4uYXBwc3luYy5HcmFwaHFsVHlwZS5pbnRlcm1lZGlhdGUoJycsIG9wdGlvbnMpLCB7IG9iamVjdFR5cGVOYW1lOiB0eXBlTmFtZSB9IH07XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBKb21weEdyYXBocWxUeXBlIGV4dGVuZHMgYXBwc3luYy5HcmFwaHFsVHlwZSB7XHJcbi8vICAgICBwdWJsaWMgb2JqZWN0VHlwZU5hbWUgPSAnJztcclxuLy8gICAgIGRlY2xhcmUgZmllbGRPcHRpb25zPzogYXBwc3luYy5SZXNvbHZhYmxlRmllbGRPcHRpb25zO1xyXG4vLyAgICAgY29uc3RydWN0b3Iob2JqZWN0VHlwZU5hbWU6IHN0cmluZywgdHlwZTogYXBwc3luYy5UeXBlLCBvcHRpb25zPzogYXBwc3luYy5HcmFwaHFsVHlwZU9wdGlvbnMpIHtcclxuLy8gICAgICAgICBzdXBlcih0eXBlLCBvcHRpb25zKTtcclxuLy8gICAgICAgICB0aGlzLm9iamVjdFR5cGVOYW1lID0gb2JqZWN0VHlwZU5hbWU7XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBKb21weEdyYXBocWxUeXBlIGV4dGVuZHMgYXBwc3luYy5HcmFwaHFsVHlwZSB7XHJcbi8vICAgICBzdGF0aWMgb2JqZWN0VHlwZU5hbWUgPSAnJztcclxuLy8gICAgIHN0YXRpYyBqb21weFR5cGUob2JqZWN0VHlwZU5hbWU6IHN0cmluZywgb3B0aW9ucz86IGFwcHN5bmMuQmFzZVR5cGVPcHRpb25zKTogYXBwc3luYy5HcmFwaHFsVHlwZSB7XHJcbi8vICAgICAgICAgY29uc29sZS5sb2cob2JqZWN0VHlwZU5hbWUsIG9wdGlvbnMpO1xyXG4vLyAgICAgICAgIHRoaXMub2JqZWN0VHlwZU5hbWUgPSBvYmplY3RUeXBlTmFtZTtcclxuLy8gICAgICAgICAvLyByZXR1cm4gKHVuZGVmaW5lZCBhcyB1bmtub3duIGFzIGFwcHN5bmMuT2JqZWN0VHlwZSkuYXR0cmlidXRlKG9wdGlvbnMpO1xyXG4vLyAgICAgICAgIC8vIGNvbnN0IG9iamVjdFR5cGUgPSBuZXcgYXBwc3luYy5PYmplY3RUeXBlKHR5cGVOYW1lLCB7IGRlZmluaXRpb246IHsgZHVtbXk6IGFwcHN5bmMuR3JhcGhxbFR5cGUuc3RyaW5nKCkgfSB9KTtcclxuLy8gICAgICAgICAvLyByZXR1cm4gb2JqZWN0VHlwZS5hdHRyaWJ1dGUoKTtcclxuLy8gICAgICAgICAvLyByZXR1cm4gYXBwc3luYy5HcmFwaHFsVHlwZS5pbnRlcm1lZGlhdGUoJycsIG9wdGlvbnMpO1xyXG4vLyAgICAgICAgIC8vIHJldHVybiB7IC4uLmFwcHN5bmMuR3JhcGhxbFR5cGUuaW50ZXJtZWRpYXRlKCcnLCBvcHRpb25zKSwgeyBvYmplY3RUeXBlTmFtZTogdHlwZU5hbWUgfSB9O1xyXG4vLyAgICAgICAgIHJldHVybiBhcHBzeW5jLkdyYXBocWxUeXBlLnN0cmluZygpO1xyXG4vLyAgICAgfVxyXG4vLyB9XHJcblxyXG4vKipcclxuICogR29hTDogQWxsb3cgc2NoZW1hIHRvIGluY2x1ZGUgUmVzb2x2YWJsZUZpZWxkIGRlZmludGlpb24gd2l0aCBzdHJpbmcgdHlwZSBpbnN0ZWFkIG9mIGFjdHVhbCB0eXBlIHRvIHdvcmsgYXJvdW5kIHRoZSB0eXBlIGNoaWNrZW4gb3IgZWdnIHByb2JsZW0uXHJcbiAqIENyZWF0ZSBhbiBpbXBsZW1lbnRpb24gYXMgY2xvc2UgdG8gbmF0aXZlIEFwcFN5bmMgYXMgcG9zc2libGUuIERvIE5PVCBmb3JjZSBhIGRldmVsb3BlciB0byBsZWFybiBuZXcgY3VzdG9tIHN5bnRheC5cclxuICogU2VlIHNldFJlc29sdmFibGVGaWVsZFR5cGUgbWV0aG9kIGZvciBtb3JlIGluZm9ybWF0aW9uLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBFeHRlbmQgR3JhcGhxbFR5cGVPcHRpb25zIHRvIGluY2x1ZGUgYSBuZXcgdHlwZU5hbWUgcGFyYW1ldGVyLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBKb21weEdyYXBocWxUeXBlT3B0aW9ucyBleHRlbmRzIGFwcHN5bmMuR3JhcGhxbFR5cGVPcHRpb25zIHtcclxuICAgIHJlYWRvbmx5IHR5cGVOYW1lOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFeHRlbmQgR3JhcGhxbFR5cGUgdG8gY3JlYXRlIGEgbmV3IGRhdGF0eXBlIHRvIGluY2x1ZGUgYSBuZXcgdHlwZU5hbWUgcHJvcGVydHkuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSm9tcHhHcmFwaHFsVHlwZSBleHRlbmRzIGFwcHN5bmMuR3JhcGhxbFR5cGUge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgb2JqZWN0VHlwZShvcHRpb25zPzogSm9tcHhHcmFwaHFsVHlwZU9wdGlvbnMpOiBhcHBzeW5jLkdyYXBocWxUeXBlIHtcclxuICAgICAgICByZXR1cm4gbmV3IEpvbXB4R3JhcGhxbFR5cGUoYXBwc3luYy5UeXBlLklOVEVSTUVESUFURSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGVOYW1lOiBzdHJpbmcgPSAnJztcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IodHlwZTogYXBwc3luYy5UeXBlLCBvcHRpb25zPzogSm9tcHhHcmFwaHFsVHlwZU9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcih0eXBlLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLnR5cGVOYW1lID0gb3B0aW9ucz8udHlwZU5hbWUgPz8gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNvbHZlIGEgSm9tcHhHcmFwaHFsVHlwZSB3aXRoIHN0cmluZyB0eXBlIHRvIGEgR3JhcGhxbFR5cGUgd2l0aCBhY3R1YWwgdHlwZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlc29sdmUoc2NoZW1hVHlwZXM6IElTY2hlbWFUeXBlKTogYXBwc3luYy5HcmFwaHFsVHlwZSB7XHJcblxyXG4gICAgICAgIGNvbnN0IG9iamVjdFR5cGUgPSBzY2hlbWFUeXBlcy5vYmplY3RUeXBlc1t0aGlzLnR5cGVOYW1lXTtcclxuICAgICAgICBpZiAoIW9iamVjdFR5cGUpIHRocm93IEVycm9yKGBKb21weDogVHlwZSAnJHt0aGlzLnR5cGVOYW1lfScgbm90IGZvdW5kIGZvciBKb21weEdyYXBocWxUeXBlISBBZGQgdHlwZSB0byBzY2hlbWEgdHlwZXNgKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmV3R3JhcGhxbFR5cGUgPSBzY2hlbWFUeXBlcy5vYmplY3RUeXBlc1t0aGlzLnR5cGVOYW1lXS5hdHRyaWJ1dGUodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0dyYXBocWxUeXBlO1xyXG4gICAgfVxyXG59Il19