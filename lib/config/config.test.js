"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const config_1 = require("./config");
const jompx_config_1 = require("./test/jompx.config");
/**
 * npx jest config.test.ts
 */
let config;
beforeAll(async () => {
    const app = new cdk.App({ context: { ...jompx_config_1.Config, '@jompx-local': { stage: 'prod' } } });
    new cdk.Stack(app);
    config = new config_1.Config(app.node);
});
describe('Config', () => {
    test('stage', () => {
        const stage = config.stage();
        expect(stage).toBe('prod');
    });
    test('environments', () => {
        const environments = config.environments();
        expect(environments).toHaveLength(5);
    });
    test('environmentByName', () => {
        const environment = config.environmentByName('prod');
        expect(environment).toEqual(expect.objectContaining({
            accountId: '281660020318',
            region: 'us-west-2',
            name: 'prod'
        }));
    });
    test('environmentByAccountId', () => {
        const environment = config.environmentByAccountId('281660020318');
        expect(environment).toEqual(expect.objectContaining({
            accountId: '281660020318',
            region: 'us-west-2',
            name: 'prod'
        }));
    });
    test('stages', () => {
        const stages = config.stages();
        if (stages) {
            const stagesMap = new Map(Object.entries(stages));
            expect(stagesMap.size).toBe(4);
            expect(stages.prod).toHaveProperty('branch', 'main');
        }
    });
    test('stageDeployments', () => {
        const stageDeployments = config.stageDeployments('prod');
        expect(stageDeployments).toHaveLength(3);
    });
    test('env', () => {
        const env = config.env('app');
        expect(env).toEqual(expect.objectContaining({
            account: '281660020318',
            region: 'us-west-2'
        }));
    });
    test('env + stageName', () => {
        const env = config.env('app', 'test');
        expect(env).toEqual(expect.objectContaining({
            account: '706457422044',
            region: 'us-west-2'
        }));
    });
    test('organizationName', () => {
        const organizationName = config.organizationName();
        expect(organizationName).toBe('my-org');
    });
    test('organizationNamePascalCase', () => {
        const organizationName = config.organizationNamePascalCase();
        expect(organizationName).toBe('MyOrg');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL2NvbmZpZy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW1DO0FBQ25DLHFDQUFrQztBQUNsQyxzREFBNEQ7QUFFNUQ7O0dBRUc7QUFFSCxJQUFJLE1BQWMsQ0FBQztBQUVuQixTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDakIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsR0FBRyxxQkFBVyxFQUFFLGNBQWMsRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM1RixJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkIsTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO0lBQ3BCLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1FBQ2YsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUN0QixNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDM0MsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDM0IsTUFBTSxXQUFXLEdBQUcsTUFBTSxD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Q1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XHJcbmltcG9ydCB7IENvbmZpZyBhcyBKb21weENvbmZpZyB9IGZyb20gJy4vdGVzdC9qb21weC5jb25maWcnO1xyXG5cclxuLyoqXHJcbiAqIG5weCBqZXN0IGNvbmZpZy50ZXN0LnRzXHJcbiAqL1xyXG5cclxubGV0IGNvbmZpZzogQ29uZmlnO1xyXG5cclxuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKHsgY29udGV4dDogeyAuLi5Kb21weENvbmZpZywgJ0Bqb21weC1sb2NhbCc6IHsgc3RhZ2U6ICdwcm9kJyB9IH0gfSk7XHJcbiAgICBuZXcgY2RrLlN0YWNrKGFwcCk7XHJcbiAgICBjb25maWcgPSBuZXcgQ29uZmlnKGFwcC5ub2RlKTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgnQ29uZmlnJywgKCkgPT4ge1xyXG4gICAgdGVzdCgnc3RhZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhZ2UgPSBjb25maWcuc3RhZ2UoKTtcclxuICAgICAgICBleHBlY3Qoc3RhZ2UpLnRvQmUoJ3Byb2QnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRlc3QoJ2Vudmlyb25tZW50cycsICgpID0+IHtcclxuICAgICAgICBjb25zdCBlbnZpcm9ubWVudHMgPSBjb25maWcuZW52aXJvbm1lbnRzKCk7XHJcbiAgICAgICAgZXhwZWN0KGVudmlyb25tZW50cykudG9IYXZlTGVuZ3RoKDUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnZW52aXJvbm1lbnRCeU5hbWUnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZW52aXJvbm1lbnQgPSBjb25maWcuZW52aXJvbm1lbnRCeU5hbWUoJ3Byb2QnKTtcclxuICAgICAgICBleHBlY3QoZW52aXJvbm1lbnQpLnRvRXF1YWwoXHJcbiAgICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcclxuICAgICAgICAgICAgICAgIGFjY291bnRJZDogJzI4MTY2MDAyMDMxOCcsXHJcbiAgICAgICAgICAgICAgICByZWdpb246ICd1cy13ZXN0LTInLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJ3Byb2QnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRlc3QoJ2Vudmlyb25tZW50QnlBY2NvdW50SWQnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZW52aXJvbm1lbnQgPSBjb25maWcuZW52aXJvbm1lbnRCeUFjY291bnRJZCgnMjgxNjYwMDIwMzE4Jyk7XHJcbiAgICAgICAgZXhwZWN0KGVudmlyb25tZW50KS50b0VxdWFsKFxyXG4gICAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgICAgICAgICBhY2NvdW50SWQ6ICcyODE2NjAwMjAzMTgnLFxyXG4gICAgICAgICAgICAgICAgcmVnaW9uOiAndXMtd2VzdC0yJyxcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdwcm9kJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdzdGFnZXMnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhZ2VzID0gY29uZmlnLnN0YWdlcygpO1xyXG4gICAgICAgIGlmIChzdGFnZXMpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhZ2VzTWFwID0gbmV3IE1hcChPYmplY3QuZW50cmllcyhzdGFnZXMpKTtcclxuICAgICAgICAgICAgZXhwZWN0KHN0YWdlc01hcC5zaXplKS50b0JlKDQpO1xyXG4gICAgICAgICAgICBleHBlY3Qoc3RhZ2VzLnByb2QpLnRvSGF2ZVByb3BlcnR5KCdicmFuY2gnLCAnbWFpbicpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRlc3QoJ3N0YWdlRGVwbG95bWVudHMnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhZ2VEZXBsb3ltZW50cyA9IGNvbmZpZy5zdGFnZURlcGxveW1lbnRzKCdwcm9kJyk7XHJcbiAgICAgICAgZXhwZWN0KHN0YWdlRGVwbG95bWVudHMpLnRvSGF2ZUxlbmd0aCgzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRlc3QoJ2VudicsICgpID0+IHtcclxuICAgICAgICBjb25zdCBlbnYgPSBjb25maWcuZW52KCdhcHAnKTtcclxuICAgICAgICBleHBlY3QoZW52KS50b0VxdWFsKFxyXG4gICAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgICAgICAgICBhY2NvdW50OiAnMjgxNjYwMDIwMzE4JyxcclxuICAgICAgICAgICAgICAgIHJlZ2lvbjogJ3VzLXdlc3QtMidcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnZW52ICsgc3RhZ2VOYW1lJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVudiA9IGNvbmZpZy5lbnYoJ2FwcCcsICd0ZXN0Jyk7XHJcbiAgICAgICAgZXhwZWN0KGVudikudG9FcXVhbChcclxuICAgICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgICAgICAgICAgYWNjb3VudDogJzcwNjQ1NzQyMjA0NCcsXHJcbiAgICAgICAgICAgICAgICByZWdpb246ICd1cy13ZXN0LTInXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRlc3QoJ29yZ2FuaXphdGlvbk5hbWUnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9uTmFtZSA9IGNvbmZpZy5vcmdhbml6YXRpb25OYW1lKCk7XHJcbiAgICAgICAgZXhwZWN0KG9yZ2FuaXphdGlvbk5hbWUpLnRvQmUoJ215LW9yZycpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnb3JnYW5pemF0aW9uTmFtZVBhc2NhbENhc2UnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9uTmFtZSA9IGNvbmZpZy5vcmdhbml6YXRpb25OYW1lUGFzY2FsQ2FzZSgpO1xyXG4gICAgICAgIGV4cGVjdChvcmdhbml6YXRpb25OYW1lKS50b0JlKCdNeU9yZycpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG4iXX0=