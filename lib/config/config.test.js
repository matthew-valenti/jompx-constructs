"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
// import { Template } from 'aws-cdk-lib/assertions';
// import { Config } from '../src/classes/config';
// import { AppSync, IAppSyncProps } from '../../src/constructs/app-sync/app-sync.construct';
// import * as jompx from '../../../src';
const config_1 = require("./config");
const jompx_config_1 = require("./test/jompx.config");
// import { MySqlSchema } from './mysql.schema';
/**
 * npx jest config.test.ts
 */
let config;
beforeAll(async () => {
    const app = new cdk.App({ context: { ...jompx_config_1.Config, '@jompx-local': { stage: 'prod' } } });
    new cdk.Stack(app);
    config = new config_1.Config(app.node);
});
describe('Config', () => {
    test('stage', () => {
        const stage = config.stage();
        expect(stage).toBe('prod');
    });
    test('environments', () => {
        const environments = config.environments();
        expect(environments).toHaveLength(5);
    });
    test('environmentByName', () => {
        const environment = config.environmentByName('prod');
        expect(environment).toEqual(expect.objectContaining({
            accountId: '281660020318',
            region: 'us-west-2',
            name: 'prod'
        }));
    });
    test('environmentByAccountId', () => {
        const environment = config.environmentByAccountId('281660020318');
        expect(environment).toEqual(expect.objectContaining({
            accountId: '281660020318',
            region: 'us-west-2',
            name: 'prod'
        }));
    });
    test('stages', () => {
        const stages = config.stages();
        if (stages) {
            const stagesMap = new Map(Object.entries(stages));
            expect(stagesMap.size).toBe(4);
            expect(stages.prod).toHaveProperty('branch', 'main');
        }
    });
    test('stageEnvironments', () => {
        const stageEnvironments = config.stageEnvironments('prod');
        expect(stageEnvironments).toHaveLength(3);
    });
    test('env', () => {
        const env = config.env('app');
        expect(env).toEqual(expect.objectContaining({
            account: '281660020318',
            region: 'us-west-2'
        }));
    });
    test('env + stageName', () => {
        const env = config.env('app', 'test');
        expect(env).toEqual(expect.objectContaining({
            account: '706457422044',
            region: 'us-west-2'
        }));
    });
    test('organizationName', () => {
        const organizationName = config.organizationName();
        expect(organizationName).toBe('my-org');
    });
    test('organizationNamePascalCase', () => {
        const organizationName = config.organizationNamePascalCase();
        expect(organizationName).toBe('MyOrg');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL2NvbmZpZy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW1DO0FBQ25DLHFEQUFxRDtBQUNyRCxrREFBa0Q7QUFDbEQsNkZBQTZGO0FBQzdGLHlDQUF5QztBQUN6QyxxQ0FBa0M7QUFDbEMsc0RBQTREO0FBQzVELGdEQUFnRDtBQUVoRDs7R0FFRztBQUVILElBQUksTUFBYyxDQUFDO0FBRW5CLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNqQixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxHQUFHLHFCQUFXLEVBQUUsY0FBYyxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzVGLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQixNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7SUFDcEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7UUFDZixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDN0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO1FBQ3RCLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMzQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUMsQ0FBQyxDQUFD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Z0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XHJcbi8vIGltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnYXdzLWNkay1saWIvYXNzZXJ0aW9ucyc7XHJcbi8vIGltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uL3NyYy9jbGFzc2VzL2NvbmZpZyc7XHJcbi8vIGltcG9ydCB7IEFwcFN5bmMsIElBcHBTeW5jUHJvcHMgfSBmcm9tICcuLi8uLi9zcmMvY29uc3RydWN0cy9hcHAtc3luYy9hcHAtc3luYy5jb25zdHJ1Y3QnO1xyXG4vLyBpbXBvcnQgKiBhcyBqb21weCBmcm9tICcuLi8uLi8uLi9zcmMnO1xyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XHJcbmltcG9ydCB7IENvbmZpZyBhcyBKb21weENvbmZpZyB9IGZyb20gJy4vdGVzdC9qb21weC5jb25maWcnO1xyXG4vLyBpbXBvcnQgeyBNeVNxbFNjaGVtYSB9IGZyb20gJy4vbXlzcWwuc2NoZW1hJztcclxuXHJcbi8qKlxyXG4gKiBucHggamVzdCBjb25maWcudGVzdC50c1xyXG4gKi9cclxuXHJcbmxldCBjb25maWc6IENvbmZpZztcclxuXHJcbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBhcHAgPSBuZXcgY2RrLkFwcCh7IGNvbnRleHQ6IHsgLi4uSm9tcHhDb25maWcsICdAam9tcHgtbG9jYWwnOiB7IHN0YWdlOiAncHJvZCcgfSB9IH0pO1xyXG4gICAgbmV3IGNkay5TdGFjayhhcHApO1xyXG4gICAgY29uZmlnID0gbmV3IENvbmZpZyhhcHAubm9kZSk7XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ0NvbmZpZycsICgpID0+IHtcclxuICAgIHRlc3QoJ3N0YWdlJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN0YWdlID0gY29uZmlnLnN0YWdlKCk7XHJcbiAgICAgICAgZXhwZWN0KHN0YWdlKS50b0JlKCdwcm9kJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdlbnZpcm9ubWVudHMnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZW52aXJvbm1lbnRzID0gY29uZmlnLmVudmlyb25tZW50cygpO1xyXG4gICAgICAgIGV4cGVjdChlbnZpcm9ubWVudHMpLnRvSGF2ZUxlbmd0aCg1KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRlc3QoJ2Vudmlyb25tZW50QnlOYW1lJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVudmlyb25tZW50ID0gY29uZmlnLmVudmlyb25tZW50QnlOYW1lKCdwcm9kJyk7XHJcbiAgICAgICAgZXhwZWN0KGVudmlyb25tZW50KS50b0VxdWFsKFxyXG4gICAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgICAgICAgICBhY2NvdW50SWQ6ICcyODE2NjAwMjAzMTgnLFxyXG4gICAgICAgICAgICAgICAgcmVnaW9uOiAndXMtd2VzdC0yJyxcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdwcm9kJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdlbnZpcm9ubWVudEJ5QWNjb3VudElkJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVudmlyb25tZW50ID0gY29uZmlnLmVudmlyb25tZW50QnlBY2NvdW50SWQoJzI4MTY2MDAyMDMxOCcpO1xyXG4gICAgICAgIGV4cGVjdChlbnZpcm9ubWVudCkudG9FcXVhbChcclxuICAgICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgICAgICAgICAgYWNjb3VudElkOiAnMjgxNjYwMDIwMzE4JyxcclxuICAgICAgICAgICAgICAgIHJlZ2lvbjogJ3VzLXdlc3QtMicsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiAncHJvZCdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnc3RhZ2VzJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN0YWdlcyA9IGNvbmZpZy5zdGFnZXMoKTtcclxuICAgICAgICBpZiAoc3RhZ2VzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YWdlc01hcCA9IG5ldyBNYXAoT2JqZWN0LmVudHJpZXMoc3RhZ2VzKSk7XHJcbiAgICAgICAgICAgIGV4cGVjdChzdGFnZXNNYXAuc2l6ZSkudG9CZSg0KTtcclxuICAgICAgICAgICAgZXhwZWN0KHN0YWdlcy5wcm9kKS50b0hhdmVQcm9wZXJ0eSgnYnJhbmNoJywgJ21haW4nKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdzdGFnZUVudmlyb25tZW50cycsICgpID0+IHtcclxuICAgICAgICBjb25zdCBzdGFnZUVudmlyb25tZW50cyA9IGNvbmZpZy5zdGFnZUVudmlyb25tZW50cygncHJvZCcpO1xyXG4gICAgICAgIGV4cGVjdChzdGFnZUVudmlyb25tZW50cykudG9IYXZlTGVuZ3RoKDMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnZW52JywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVudiA9IGNvbmZpZy5lbnYoJ2FwcCcpO1xyXG4gICAgICAgIGV4cGVjdChlbnYpLnRvRXF1YWwoXHJcbiAgICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcclxuICAgICAgICAgICAgICAgIGFjY291bnQ6ICcyODE2NjAwMjAzMTgnLFxyXG4gICAgICAgICAgICAgICAgcmVnaW9uOiAndXMtd2VzdC0yJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdlbnYgKyBzdGFnZU5hbWUnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZW52ID0gY29uZmlnLmVudignYXBwJywgJ3Rlc3QnKTtcclxuICAgICAgICBleHBlY3QoZW52KS50b0VxdWFsKFxyXG4gICAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgICAgICAgICBhY2NvdW50OiAnNzA2NDU3NDIyMDQ0JyxcclxuICAgICAgICAgICAgICAgIHJlZ2lvbjogJ3VzLXdlc3QtMidcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnb3JnYW5pemF0aW9uTmFtZScsICgpID0+IHtcclxuICAgICAgICBjb25zdCBvcmdhbml6YXRpb25OYW1lID0gY29uZmlnLm9yZ2FuaXphdGlvbk5hbWUoKTtcclxuICAgICAgICBleHBlY3Qob3JnYW5pemF0aW9uTmFtZSkudG9CZSgnbXktb3JnJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdvcmdhbml6YXRpb25OYW1lUGFzY2FsQ2FzZScsICgpID0+IHtcclxuICAgICAgICBjb25zdCBvcmdhbml6YXRpb25OYW1lID0gY29uZmlnLm9yZ2FuaXphdGlvbk5hbWVQYXNjYWxDYXNlKCk7XHJcbiAgICAgICAgZXhwZWN0KG9yZ2FuaXphdGlvbk5hbWUpLnRvQmUoJ015T3JnJyk7XHJcbiAgICB9KTtcclxufSk7XHJcbiJdfQ==