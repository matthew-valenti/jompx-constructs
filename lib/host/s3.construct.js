"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Certificate = void 0;
const acm = require("aws-cdk-lib/aws-certificatemanager");
const route53 = require("aws-cdk-lib/aws-route53");
const constructs_1 = require("constructs");
const config_1 = require("../config/config");
class Certificate extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.outputs = {};
        const config = new config_1.Config(this.node);
        const stage = config.stage();
        // Use root/bare/apex domain name for production or subdomain for other AWS account stages.
        const stageDomainName = stage === 'prod' ? props.domainName : `${stage}.${props.domainName}`;
        // Lookup Route53 public hosted zone created by org-formation.
        // If AWS account doesn't have a hosted zone subdomain then a certificate will not be created.
        this.outputs.publicHostedZone = route53.PublicHostedZone.fromLookup(this, 'LookupHostedZone', { domainName: stageDomainName });
        if (this.outputs.publicHostedZone) {
            this.outputs.certificate = new acm.Certificate(this, 'Certificate', {
                // Wildcard protects one subdomain level only e.g. *.example.com can protect login.example.com, and test.example.com, but it cannot protect test.login.example.com
                domainName: `*.${stageDomainName}`,
                // Validate certificate via DNS (auto created).
                validation: acm.CertificateValidation.fromDns(this.outputs.publicHostedZone)
            });
        }
    }
}
exports.Certificate = Certificate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczMuY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hvc3QvczMuY29uc3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUEwRDtBQUMxRCxtREFBbUQ7QUFDbkQsMkNBQXVDO0FBQ3ZDLDZDQUEwQztBQVcxQyxNQUFhLFdBQVksU0FBUSxzQkFBUztJQUl0QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXdCO1FBQzlELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFIZCxZQUFPLEdBQXdCLEVBQXlCLENBQUM7UUFLNUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUU3QiwyRkFBMkY7UUFDM0YsTUFBTSxlQUFlLEdBQUcsS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRTdGLDhEQUE4RDtRQUM5RCw4RkFBOEY7UUFDOUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBRS9ILElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtZQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRTtnQkFDaEUsa0tBQWtLO2dCQUNsSyxVQUFVLEVBQUUsS0FBSyxlQUFlLEVBQUU7Z0JBQ2xDLCtDQUErQztnQkFDL0MsVUFBVSxFQUFFLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQzthQUMvRSxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7Q0FDSjtBQTFCRCxrQ0EwQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhY20gZnJvbSAnYXdzLWNkay1saWIvYXdzLWNlcnRpZmljYXRlbWFuYWdlcic7XHJcbmltcG9ydCAqIGFzIHJvdXRlNTMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXJvdXRlNTMnO1xyXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcclxuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2NvbmZpZyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElDZXJ0aWZpY2F0ZVByb3BzIHtcclxuICAgIGRvbWFpbk5hbWU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQ2VydGlmaWNhdGVPdXRwdXRzIHtcclxuICAgIHB1YmxpY0hvc3RlZFpvbmU6IHJvdXRlNTMuSUhvc3RlZFpvbmU7XHJcbiAgICBjZXJ0aWZpY2F0ZTogYWNtLkNlcnRpZmljYXRlIHwgdW5kZWZpbmVkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2VydGlmaWNhdGUgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xyXG5cclxuICAgIHB1YmxpYyBvdXRwdXRzOiBJQ2VydGlmaWNhdGVPdXRwdXRzID0ge30gYXMgSUNlcnRpZmljYXRlT3V0cHV0cztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogSUNlcnRpZmljYXRlUHJvcHMpIHtcclxuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xyXG5cclxuICAgICAgICBjb25zdCBjb25maWcgPSBuZXcgQ29uZmlnKHRoaXMubm9kZSk7XHJcbiAgICAgICAgY29uc3Qgc3RhZ2UgPSBjb25maWcuc3RhZ2UoKTtcclxuXHJcbiAgICAgICAgLy8gVXNlIHJvb3QvYmFyZS9hcGV4IGRvbWFpbiBuYW1lIGZvciBwcm9kdWN0aW9uIG9yIHN1YmRvbWFpbiBmb3Igb3RoZXIgQVdTIGFjY291bnQgc3RhZ2VzLlxyXG4gICAgICAgIGNvbnN0IHN0YWdlRG9tYWluTmFtZSA9IHN0YWdlID09PSAncHJvZCcgPyBwcm9wcy5kb21haW5OYW1lIDogYCR7c3RhZ2V9LiR7cHJvcHMuZG9tYWluTmFtZX1gO1xyXG5cclxuICAgICAgICAvLyBMb29rdXAgUm91dGU1MyBwdWJsaWMgaG9zdGVkIHpvbmUgY3JlYXRlZCBieSBvcmctZm9ybWF0aW9uLlxyXG4gICAgICAgIC8vIElmIEFXUyBhY2NvdW50IGRvZXNuJ3QgaGF2ZSBhIGhvc3RlZCB6b25lIHN1YmRvbWFpbiB0aGVuIGEgY2VydGlmaWNhdGUgd2lsbCBub3QgYmUgY3JlYXRlZC5cclxuICAgICAgICB0aGlzLm91dHB1dHMucHVibGljSG9zdGVkWm9uZSA9IHJvdXRlNTMuUHVibGljSG9zdGVkWm9uZS5mcm9tTG9va3VwKHRoaXMsICdMb29rdXBIb3N0ZWRab25lJywgeyBkb21haW5OYW1lOiBzdGFnZURvbWFpbk5hbWUgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm91dHB1dHMucHVibGljSG9zdGVkWm9uZSkge1xyXG4gICAgICAgICAgICB0aGlzLm91dHB1dHMuY2VydGlmaWNhdGUgPSBuZXcgYWNtLkNlcnRpZmljYXRlKHRoaXMsICdDZXJ0aWZpY2F0ZScsIHtcclxuICAgICAgICAgICAgICAgIC8vIFdpbGRjYXJkIHByb3RlY3RzIG9uZSBzdWJkb21haW4gbGV2ZWwgb25seSBlLmcuICouZXhhbXBsZS5jb20gY2FuIHByb3RlY3QgbG9naW4uZXhhbXBsZS5jb20sIGFuZCB0ZXN0LmV4YW1wbGUuY29tLCBidXQgaXQgY2Fubm90IHByb3RlY3QgdGVzdC5sb2dpbi5leGFtcGxlLmNvbVxyXG4gICAgICAgICAgICAgICAgZG9tYWluTmFtZTogYCouJHtzdGFnZURvbWFpbk5hbWV9YCxcclxuICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIGNlcnRpZmljYXRlIHZpYSBETlMgKGF1dG8gY3JlYXRlZCkuXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBhY20uQ2VydGlmaWNhdGVWYWxpZGF0aW9uLmZyb21EbnModGhpcy5vdXRwdXRzLnB1YmxpY0hvc3RlZFpvbmUpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=