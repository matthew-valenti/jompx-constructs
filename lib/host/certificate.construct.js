"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostCertificate = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const acm = require("aws-cdk-lib/aws-certificatemanager");
const route53 = require("aws-cdk-lib/aws-route53");
const constructs_1 = require("constructs");
const config_1 = require("../config/config");
class HostCertificate extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.outputs = {};
        const config = new config_1.Config(this.node);
        const stage = config.stage();
        // Use root/bare/apex domain name for production or subdomain for other AWS account stages.
        const stageDomainName = stage === 'prod' ? props.domainName : `${stage}.${props.domainName}`;
        // Lookup Route53 public hosted zone created by org-formation.
        // If AWS account doesn't have a hosted zone subdomain then a certificate will not be created.
        this.outputs.publicHostedZone = route53.PublicHostedZone.fromLookup(this, 'LookupHostedZone', { domainName: stageDomainName });
        if (this.outputs.publicHostedZone) {
            this.outputs.certificate = new acm.Certificate(this, 'PublicHostedZoneCertificate', {
                // Wildcard protects one subdomain level only e.g. *.example.com can protect login.example.com, and test.example.com, but it cannot protect test.login.example.com
                domainName: `*.${stageDomainName}`,
                // Validate certificate via DNS (auto created).
                validation: acm.CertificateValidation.fromDns(this.outputs.publicHostedZone)
            });
        }
    }
}
exports.HostCertificate = HostCertificate;
_a = JSII_RTTI_SYMBOL_1;
HostCertificate[_a] = { fqn: "@jompx/constructs.HostCertificate", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VydGlmaWNhdGUuY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hvc3QvY2VydGlmaWNhdGUuY29uc3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMERBQTBEO0FBQzFELG1EQUFtRDtBQUNuRCwyQ0FBdUM7QUFDdkMsNkNBQTBDO0FBVzFDLE1BQWEsZUFBZ0IsU0FBUSxzQkFBUztJQUkxQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQTRCO1FBQ2xFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFIZCxZQUFPLEdBQTRCLEVBQTZCLENBQUM7UUFLcEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUU3QiwyRkFBMkY7UUFDM0YsTUFBTSxlQUFlLEdBQUcsS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRTdGLDhEQUE4RDtRQUM5RCw4RkFBOEY7UUFDOUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBRS9ILElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtZQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLDZCQUE2QixFQUFFO2dCQUNoRixrS0FBa0s7Z0JBQ2xLLFVBQVUsRUFBRSxLQUFLLGVBQWUsRUFBRTtnQkFDbEMsK0NBQStDO2dCQUMvQyxVQUFVLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDO2FBQy9FLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7QUF6QkwsMENBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYWNtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1jZXJ0aWZpY2F0ZW1hbmFnZXInO1xyXG5pbXBvcnQgKiBhcyByb3V0ZTUzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1yb3V0ZTUzJztcclxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XHJcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9jb25maWcnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJSG9zdENlcnRpZmljYXRlUHJvcHMge1xyXG4gICAgZG9tYWluTmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElIb3N0Q2VydGlmaWNhdGVPdXRwdXRzIHtcclxuICAgIHB1YmxpY0hvc3RlZFpvbmU6IHJvdXRlNTMuSUhvc3RlZFpvbmU7XHJcbiAgICBjZXJ0aWZpY2F0ZTogYWNtLkNlcnRpZmljYXRlIHwgdW5kZWZpbmVkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSG9zdENlcnRpZmljYXRlIGV4dGVuZHMgQ29uc3RydWN0IHtcclxuXHJcbiAgICBwdWJsaWMgb3V0cHV0czogSUhvc3RDZXJ0aWZpY2F0ZU91dHB1dHMgPSB7fSBhcyBJSG9zdENlcnRpZmljYXRlT3V0cHV0cztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogSUhvc3RDZXJ0aWZpY2F0ZVByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29uZmlnID0gbmV3IENvbmZpZyh0aGlzLm5vZGUpO1xyXG4gICAgICAgIGNvbnN0IHN0YWdlID0gY29uZmlnLnN0YWdlKCk7XHJcblxyXG4gICAgICAgIC8vIFVzZSByb290L2JhcmUvYXBleCBkb21haW4gbmFtZSBmb3IgcHJvZHVjdGlvbiBvciBzdWJkb21haW4gZm9yIG90aGVyIEFXUyBhY2NvdW50IHN0YWdlcy5cclxuICAgICAgICBjb25zdCBzdGFnZURvbWFpbk5hbWUgPSBzdGFnZSA9PT0gJ3Byb2QnID8gcHJvcHMuZG9tYWluTmFtZSA6IGAke3N0YWdlfS4ke3Byb3BzLmRvbWFpbk5hbWV9YDtcclxuXHJcbiAgICAgICAgLy8gTG9va3VwIFJvdXRlNTMgcHVibGljIGhvc3RlZCB6b25lIGNyZWF0ZWQgYnkgb3JnLWZvcm1hdGlvbi5cclxuICAgICAgICAvLyBJZiBBV1MgYWNjb3VudCBkb2Vzbid0IGhhdmUgYSBob3N0ZWQgem9uZSBzdWJkb21haW4gdGhlbiBhIGNlcnRpZmljYXRlIHdpbGwgbm90IGJlIGNyZWF0ZWQuXHJcbiAgICAgICAgdGhpcy5vdXRwdXRzLnB1YmxpY0hvc3RlZFpvbmUgPSByb3V0ZTUzLlB1YmxpY0hvc3RlZFpvbmUuZnJvbUxvb2t1cCh0aGlzLCAnTG9va3VwSG9zdGVkWm9uZScsIHsgZG9tYWluTmFtZTogc3RhZ2VEb21haW5OYW1lIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5vdXRwdXRzLnB1YmxpY0hvc3RlZFpvbmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vdXRwdXRzLmNlcnRpZmljYXRlID0gbmV3IGFjbS5DZXJ0aWZpY2F0ZSh0aGlzLCAnUHVibGljSG9zdGVkWm9uZUNlcnRpZmljYXRlJywge1xyXG4gICAgICAgICAgICAgICAgLy8gV2lsZGNhcmQgcHJvdGVjdHMgb25lIHN1YmRvbWFpbiBsZXZlbCBvbmx5IGUuZy4gKi5leGFtcGxlLmNvbSBjYW4gcHJvdGVjdCBsb2dpbi5leGFtcGxlLmNvbSwgYW5kIHRlc3QuZXhhbXBsZS5jb20sIGJ1dCBpdCBjYW5ub3QgcHJvdGVjdCB0ZXN0LmxvZ2luLmV4YW1wbGUuY29tXHJcbiAgICAgICAgICAgICAgICBkb21haW5OYW1lOiBgKi4ke3N0YWdlRG9tYWluTmFtZX1gLFxyXG4gICAgICAgICAgICAgICAgLy8gVmFsaWRhdGUgY2VydGlmaWNhdGUgdmlhIEROUyAoYXV0byBjcmVhdGVkKS5cclxuICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IGFjbS5DZXJ0aWZpY2F0ZVZhbGlkYXRpb24uZnJvbURucyh0aGlzLm91dHB1dHMucHVibGljSG9zdGVkWm9uZSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==