"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostingCertificate = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const acm = require("aws-cdk-lib/aws-certificatemanager");
const route53 = require("aws-cdk-lib/aws-route53");
const constructs_1 = require("constructs");
const config_1 = require("../config/config");
class HostingCertificate extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.outputs = {};
        const config = new config_1.Config(this.node);
        const stage = config.stage();
        // Use root/bare/apex domain name for production or subdomain for other AWS account stages.
        const stageDomainName = stage === 'prod' ? props.domainName : `${stage}.${props.domainName}`;
        // Lookup Route53 public hosted zone created by org-formation.
        // If AWS account doesn't have a hosted zone subdomain then a certificate will not be created.
        this.outputs.publicHostedZone = route53.PublicHostedZone.fromLookup(this, 'LookupHostedZone', { domainName: stageDomainName });
        // TODO: ??? Use the CaaAmazonRecord construct to easily restrict certificate authorities allowed to issue certificates for a domain to Amazon only.
        if (this.outputs.publicHostedZone) {
            this.outputs.certificate = new acm.Certificate(this, 'PublicHostedZoneCertificate', {
                // Wildcard protects one subdomain level only e.g. *.example.com can protect login.example.com, and test.example.com, but it cannot protect test.login.example.com
                domainName: `*.${stageDomainName}`,
                // Validate certificate via DNS (auto created).
                validation: acm.CertificateValidation.fromDns(this.outputs.publicHostedZone)
            });
        }
    }
}
exports.HostingCertificate = HostingCertificate;
_a = JSII_RTTI_SYMBOL_1;
HostingCertificate[_a] = { fqn: "@jompx/constructs.HostingCertificate", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VydGlmaWNhdGUuY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hvc3RpbmcvY2VydGlmaWNhdGUuY29uc3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMERBQTBEO0FBQzFELG1EQUFtRDtBQUNuRCwyQ0FBdUM7QUFDdkMsNkNBQTBDO0FBVzFDLE1BQWEsa0JBQW1CLFNBQVEsc0JBQVM7SUFJN0MsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUErQjtRQUNyRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBSGQsWUFBTyxHQUErQixFQUFnQyxDQUFDO1FBSzFFLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFN0IsMkZBQTJGO1FBQzNGLE1BQU0sZUFBZSxHQUFHLEtBQUssS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUU3Riw4REFBOEQ7UUFDOUQsOEZBQThGO1FBQzlGLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUUvSCxvSkFBb0o7UUFFcEosSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFO1lBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsNkJBQTZCLEVBQUU7Z0JBQ2hGLGtLQUFrSztnQkFDbEssVUFBVSxFQUFFLEtBQUssZUFBZSxFQUFFO2dCQUNsQywrQ0FBK0M7Z0JBQy9DLFVBQVUsRUFBRSxHQUFHLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7YUFDL0UsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDOztBQTNCTCxnREE0QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhY20gZnJvbSAnYXdzLWNkay1saWIvYXdzLWNlcnRpZmljYXRlbWFuYWdlcic7XHJcbmltcG9ydCAqIGFzIHJvdXRlNTMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXJvdXRlNTMnO1xyXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcclxuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2NvbmZpZyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElIb3N0aW5nQ2VydGlmaWNhdGVQcm9wcyB7XHJcbiAgICBkb21haW5OYW1lOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUhvc3RpbmdDZXJ0aWZpY2F0ZU91dHB1dHMge1xyXG4gICAgcHVibGljSG9zdGVkWm9uZTogcm91dGU1My5JSG9zdGVkWm9uZTtcclxuICAgIGNlcnRpZmljYXRlOiBhY20uQ2VydGlmaWNhdGUgfCB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBIb3N0aW5nQ2VydGlmaWNhdGUgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xyXG5cclxuICAgIHB1YmxpYyBvdXRwdXRzOiBJSG9zdGluZ0NlcnRpZmljYXRlT3V0cHV0cyA9IHt9IGFzIElIb3N0aW5nQ2VydGlmaWNhdGVPdXRwdXRzO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBJSG9zdGluZ0NlcnRpZmljYXRlUHJvcHMpIHtcclxuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xyXG5cclxuICAgICAgICBjb25zdCBjb25maWcgPSBuZXcgQ29uZmlnKHRoaXMubm9kZSk7XHJcbiAgICAgICAgY29uc3Qgc3RhZ2UgPSBjb25maWcuc3RhZ2UoKTtcclxuXHJcbiAgICAgICAgLy8gVXNlIHJvb3QvYmFyZS9hcGV4IGRvbWFpbiBuYW1lIGZvciBwcm9kdWN0aW9uIG9yIHN1YmRvbWFpbiBmb3Igb3RoZXIgQVdTIGFjY291bnQgc3RhZ2VzLlxyXG4gICAgICAgIGNvbnN0IHN0YWdlRG9tYWluTmFtZSA9IHN0YWdlID09PSAncHJvZCcgPyBwcm9wcy5kb21haW5OYW1lIDogYCR7c3RhZ2V9LiR7cHJvcHMuZG9tYWluTmFtZX1gO1xyXG5cclxuICAgICAgICAvLyBMb29rdXAgUm91dGU1MyBwdWJsaWMgaG9zdGVkIHpvbmUgY3JlYXRlZCBieSBvcmctZm9ybWF0aW9uLlxyXG4gICAgICAgIC8vIElmIEFXUyBhY2NvdW50IGRvZXNuJ3QgaGF2ZSBhIGhvc3RlZCB6b25lIHN1YmRvbWFpbiB0aGVuIGEgY2VydGlmaWNhdGUgd2lsbCBub3QgYmUgY3JlYXRlZC5cclxuICAgICAgICB0aGlzLm91dHB1dHMucHVibGljSG9zdGVkWm9uZSA9IHJvdXRlNTMuUHVibGljSG9zdGVkWm9uZS5mcm9tTG9va3VwKHRoaXMsICdMb29rdXBIb3N0ZWRab25lJywgeyBkb21haW5OYW1lOiBzdGFnZURvbWFpbk5hbWUgfSk7XHJcblxyXG4gICAgICAgIC8vIFRPRE86ID8/PyBVc2UgdGhlIENhYUFtYXpvblJlY29yZCBjb25zdHJ1Y3QgdG8gZWFzaWx5IHJlc3RyaWN0IGNlcnRpZmljYXRlIGF1dGhvcml0aWVzIGFsbG93ZWQgdG8gaXNzdWUgY2VydGlmaWNhdGVzIGZvciBhIGRvbWFpbiB0byBBbWF6b24gb25seS5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMub3V0cHV0cy5wdWJsaWNIb3N0ZWRab25lKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3V0cHV0cy5jZXJ0aWZpY2F0ZSA9IG5ldyBhY20uQ2VydGlmaWNhdGUodGhpcywgJ1B1YmxpY0hvc3RlZFpvbmVDZXJ0aWZpY2F0ZScsIHtcclxuICAgICAgICAgICAgICAgIC8vIFdpbGRjYXJkIHByb3RlY3RzIG9uZSBzdWJkb21haW4gbGV2ZWwgb25seSBlLmcuICouZXhhbXBsZS5jb20gY2FuIHByb3RlY3QgbG9naW4uZXhhbXBsZS5jb20sIGFuZCB0ZXN0LmV4YW1wbGUuY29tLCBidXQgaXQgY2Fubm90IHByb3RlY3QgdGVzdC5sb2dpbi5leGFtcGxlLmNvbVxyXG4gICAgICAgICAgICAgICAgZG9tYWluTmFtZTogYCouJHtzdGFnZURvbWFpbk5hbWV9YCxcclxuICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRlIGNlcnRpZmljYXRlIHZpYSBETlMgKGF1dG8gY3JlYXRlZCkuXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBhY20uQ2VydGlmaWNhdGVWYWxpZGF0aW9uLmZyb21EbnModGhpcy5vdXRwdXRzLnB1YmxpY0hvc3RlZFpvbmUpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=