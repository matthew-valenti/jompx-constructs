"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostingCertificate = void 0;
const acm = require("aws-cdk-lib/aws-certificatemanager");
const route53 = require("aws-cdk-lib/aws-route53");
const constructs_1 = require("constructs");
const config_1 = require("../config/config");
class HostingCertificate extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.outputs = {};
        const config = new config_1.Config(this.node);
        const stage = config.stage();
        // Use root/bare/apex domain name for production or subdomain for other AWS account stages.
        const stageDomainName = stage === 'prod' ? props.domainName : `${stage}.${props.domainName}`;
        // Lookup Route53 public hosted zone created by org-formation.
        // If AWS account doesn't have a hosted zone subdomain then a certificate will not be created.
        this.outputs.publicHostedZone = route53.PublicHostedZone.fromLookup(this, 'LookupHostedZone', { domainName: stageDomainName });
        // TODO: ??? Use the CaaAmazonRecord construct to easily restrict certificate authorities allowed to issue certificates for a domain to Amazon only.
        if (this.outputs.publicHostedZone) {
            this.outputs.certificate = new acm.Certificate(this, 'PublicHostedZoneCertificate', {
                // Wildcard protects one subdomain level only e.g. *.example.com can protect login.example.com, and test.example.com, but it cannot protect test.login.example.com
                domainName: `*.${stageDomainName}`,
                // Validate certificate via DNS (auto created).
                validation: acm.CertificateValidation.fromDns(this.outputs.publicHostedZone)
            });
        }
    }
}
exports.HostingCertificate = HostingCertificate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VydGlmaWNhdGUuY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hvc3RpbmcvY2VydGlmaWNhdGUuY29uc3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUEwRDtBQUMxRCxtREFBbUQ7QUFDbkQsMkNBQXVDO0FBQ3ZDLDZDQUEwQztBQVcxQyxNQUFhLGtCQUFtQixTQUFRLHNCQUFTO0lBSTdDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBK0I7UUFDckUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUhkLFlBQU8sR0FBK0IsRUFBZ0MsQ0FBQztRQUsxRSxNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTdCLDJGQUEyRjtRQUMzRixNQUFNLGVBQWUsR0FBRyxLQUFLLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFN0YsOERBQThEO1FBQzlELDhGQUE4RjtRQUM5RixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFFL0gsb0pBQW9KO1FBRXBKLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtZQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLDZCQUE2QixFQUFFO2dCQUNoRixrS0FBa0s7Z0JBQ2xLLFVBQVUsRUFBRSxLQUFLLGVBQWUsRUFBRTtnQkFDbEMsK0NBQStDO2dCQUMvQyxVQUFVLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDO2FBQy9FLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztDQUNKO0FBNUJELGdEQTRCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFjbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtY2VydGlmaWNhdGVtYW5hZ2VyJztcclxuaW1wb3J0ICogYXMgcm91dGU1MyBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtcm91dGU1Myc7XHJcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi9jb25maWcvY29uZmlnJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUhvc3RpbmdDZXJ0aWZpY2F0ZVByb3BzIHtcclxuICAgIGRvbWFpbk5hbWU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJSG9zdGluZ0NlcnRpZmljYXRlT3V0cHV0cyB7XHJcbiAgICBwdWJsaWNIb3N0ZWRab25lOiByb3V0ZTUzLklIb3N0ZWRab25lO1xyXG4gICAgY2VydGlmaWNhdGU6IGFjbS5DZXJ0aWZpY2F0ZSB8IHVuZGVmaW5lZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEhvc3RpbmdDZXJ0aWZpY2F0ZSBleHRlbmRzIENvbnN0cnVjdCB7XHJcblxyXG4gICAgcHVibGljIG91dHB1dHM6IElIb3N0aW5nQ2VydGlmaWNhdGVPdXRwdXRzID0ge30gYXMgSUhvc3RpbmdDZXJ0aWZpY2F0ZU91dHB1dHM7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IElIb3N0aW5nQ2VydGlmaWNhdGVQcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IG5ldyBDb25maWcodGhpcy5ub2RlKTtcclxuICAgICAgICBjb25zdCBzdGFnZSA9IGNvbmZpZy5zdGFnZSgpO1xyXG5cclxuICAgICAgICAvLyBVc2Ugcm9vdC9iYXJlL2FwZXggZG9tYWluIG5hbWUgZm9yIHByb2R1Y3Rpb24gb3Igc3ViZG9tYWluIGZvciBvdGhlciBBV1MgYWNjb3VudCBzdGFnZXMuXHJcbiAgICAgICAgY29uc3Qgc3RhZ2VEb21haW5OYW1lID0gc3RhZ2UgPT09ICdwcm9kJyA/IHByb3BzLmRvbWFpbk5hbWUgOiBgJHtzdGFnZX0uJHtwcm9wcy5kb21haW5OYW1lfWA7XHJcblxyXG4gICAgICAgIC8vIExvb2t1cCBSb3V0ZTUzIHB1YmxpYyBob3N0ZWQgem9uZSBjcmVhdGVkIGJ5IG9yZy1mb3JtYXRpb24uXHJcbiAgICAgICAgLy8gSWYgQVdTIGFjY291bnQgZG9lc24ndCBoYXZlIGEgaG9zdGVkIHpvbmUgc3ViZG9tYWluIHRoZW4gYSBjZXJ0aWZpY2F0ZSB3aWxsIG5vdCBiZSBjcmVhdGVkLlxyXG4gICAgICAgIHRoaXMub3V0cHV0cy5wdWJsaWNIb3N0ZWRab25lID0gcm91dGU1My5QdWJsaWNIb3N0ZWRab25lLmZyb21Mb29rdXAodGhpcywgJ0xvb2t1cEhvc3RlZFpvbmUnLCB7IGRvbWFpbk5hbWU6IHN0YWdlRG9tYWluTmFtZSB9KTtcclxuXHJcbiAgICAgICAgLy8gVE9ETzogPz8/IFVzZSB0aGUgQ2FhQW1hem9uUmVjb3JkIGNvbnN0cnVjdCB0byBlYXNpbHkgcmVzdHJpY3QgY2VydGlmaWNhdGUgYXV0aG9yaXRpZXMgYWxsb3dlZCB0byBpc3N1ZSBjZXJ0aWZpY2F0ZXMgZm9yIGEgZG9tYWluIHRvIEFtYXpvbiBvbmx5LlxyXG5cclxuICAgICAgICBpZiAodGhpcy5vdXRwdXRzLnB1YmxpY0hvc3RlZFpvbmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vdXRwdXRzLmNlcnRpZmljYXRlID0gbmV3IGFjbS5DZXJ0aWZpY2F0ZSh0aGlzLCAnUHVibGljSG9zdGVkWm9uZUNlcnRpZmljYXRlJywge1xyXG4gICAgICAgICAgICAgICAgLy8gV2lsZGNhcmQgcHJvdGVjdHMgb25lIHN1YmRvbWFpbiBsZXZlbCBvbmx5IGUuZy4gKi5leGFtcGxlLmNvbSBjYW4gcHJvdGVjdCBsb2dpbi5leGFtcGxlLmNvbSwgYW5kIHRlc3QuZXhhbXBsZS5jb20sIGJ1dCBpdCBjYW5ub3QgcHJvdGVjdCB0ZXN0LmxvZ2luLmV4YW1wbGUuY29tXHJcbiAgICAgICAgICAgICAgICBkb21haW5OYW1lOiBgKi4ke3N0YWdlRG9tYWluTmFtZX1gLFxyXG4gICAgICAgICAgICAgICAgLy8gVmFsaWRhdGUgY2VydGlmaWNhdGUgdmlhIEROUyAoYXV0byBjcmVhdGVkKS5cclxuICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IGFjbS5DZXJ0aWZpY2F0ZVZhbGlkYXRpb24uZnJvbURucyh0aGlzLm91dHB1dHMucHVibGljSG9zdGVkWm9uZSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==