"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostingCertificate = void 0;
const acm = require("aws-cdk-lib/aws-certificatemanager");
const route53 = require("aws-cdk-lib/aws-route53");
const constructs_1 = require("constructs");
const config_1 = require("../config/config");
/**
 * The certificate must be present in the AWS Certificate Manager (ACM) service in the US East (N. Virginia) region: https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_cloudfront-readme.html
 */
class HostingCertificate extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const restrictCertificateAuthorities = props.restrictCertificateAuthorities === undefined ? true : props.restrictCertificateAuthorities;
        const config = new config_1.Config(this.node);
        const stage = config.stage();
        // Use root/bare/apex domain name for production or subdomain for other AWS account stages.
        const domainName = stage === 'prod' ? props.rootDomainName : `${stage}.${props.rootDomainName}`;
        // Lookup Route53 public hosted zone created by org-formation.
        // If AWS account doesn't have a hosted zone subdomain then a certificate will not be created.
        this.publicHostedZone = route53.PublicHostedZone.fromLookup(this, 'LookupHostedZone', { domainName });
        // TODO: ??? Use the CaaAmazonRecord construct to easily restrict certificate authorities allowed to issue certificates for a domain to Amazon only.
        if (this.publicHostedZone) {
            // this.certificate = new acm.Certificate(this, 'PublicHostedZoneCertificate', {
            //     // Wildcard protects one subdomain level only e.g. *.example.com can protect login.example.com, and test.example.com, but it cannot protect test.login.example.com
            //     domainName: `*.${domainName}`,
            //     // Validate certificate via DNS (auto created).
            //     validation: acm.CertificateValidation.fromDns(this.publicHostedZone),
            // });
            // Create a cross-region certificate (in region us-east-1).
            // ACM certificates that are used with CloudFront -- or higher-level constructs which rely on CloudFront -- must be in the us-east-1 region. The DnsValidatedCertificate construct exists to facilitate creating these certificates cross-region. This resource can only be used with Route53-based DNS validation.
            this.certificate = new acm.DnsValidatedCertificate(this, 'PublicHostedZoneCertificate', {
                hostedZone: this.publicHostedZone,
                domainName: `*.${domainName}`,
                region: 'us-east-1' // must be in the us-east-1 region to use with CloudFront.
            });
            // Create a CAA record to restrict certificate authorities allowed to issue certificates for a domain to Amazon only.
            if (restrictCertificateAuthorities) {
                this.caaAmazonRecord = new route53.CaaAmazonRecord(this, 'CaaAmazonRecord', {
                    zone: this.publicHostedZone,
                    comment: 'Restrict certificate authorities allowed to issue certificates to Amazon only.'
                });
            }
            // TODO: Create CloudWatch alarm.
            // this.certificate.metricDaysToExpiry().createAlarm(this, 'Alarm', {
            //     comparisonOperator: cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,
            //     evaluationPeriods: 1,
            //     threshold: 45, // Automatic rotation happens between 60 and 45 days before expiry
            // });
        }
    }
}
exports.HostingCertificate = HostingCertificate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VydGlmaWNhdGUuY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hvc3RpbmcvY2VydGlmaWNhdGUuY29uc3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBEQUEwRDtBQUMxRCxtREFBbUQ7QUFDbkQsMkNBQXVDO0FBQ3ZDLDZDQUEwQztBQU8xQzs7R0FFRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsc0JBQVM7SUFNN0MsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUErQjtRQUNyRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sOEJBQThCLEdBQUcsS0FBSyxDQUFDLDhCQUE4QixLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUM7UUFFeEksTUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUU3QiwyRkFBMkY7UUFDM0YsTUFBTSxVQUFVLEdBQUcsS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRWhHLDhEQUE4RDtRQUM5RCw4RkFBOEY7UUFDOUYsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUV0RyxvSkFBb0o7UUFFcEosSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDdkIsZ0ZBQWdGO1lBQ2hGLHlLQUF5SztZQUN6SyxxQ0FBcUM7WUFDckMsc0RBQXNEO1lBQ3RELDRFQUE0RTtZQUM1RSxNQUFNO1lBRU4sMkRBQTJEO1lBQzNELG1UQUFtVDtZQUNuVCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSw2QkFBNkIsRUFBRTtnQkFDcEYsVUFBVSxFQUFFLElBQUksQ0FBQyxnQkFBZ0I7Z0JBQ2pDLFVBQVUsRUFBRSxLQUFLLFVBQVUsRUFBRTtnQkFDN0IsTUFBTSxFQUFFLFdBQVcsQ0FBQywwREFBMEQ7YUFDakYsQ0FBQyxDQUFDO1lBRUgscUhBQXFIO1lBQ3JILElBQUksOEJBQThCLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRTtvQkFDeEUsSUFBSSxFQUFFLElBQUksQ0FBQyxnQkFBZ0I7b0JBQzNCLE9BQU8sRUFBRSxnRkFBZ0Y7aUJBQzVGLENBQUMsQ0FBQzthQUNOO1lBRUQsaUNBQWlDO1lBQ2pDLHFFQUFxRTtZQUNyRSw2RUFBNkU7WUFDN0UsNEJBQTRCO1lBQzVCLHdGQUF3RjtZQUN4RixNQUFNO1NBQ1Q7SUFDTCxDQUFDO0NBQ0o7QUF2REQsZ0RBdURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYWNtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1jZXJ0aWZpY2F0ZW1hbmFnZXInO1xyXG5pbXBvcnQgKiBhcyByb3V0ZTUzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1yb3V0ZTUzJztcclxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XHJcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9jb25maWcnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJSG9zdGluZ0NlcnRpZmljYXRlUHJvcHMge1xyXG4gICAgcm9vdERvbWFpbk5hbWU6IHN0cmluZztcclxuICAgIHJlc3RyaWN0Q2VydGlmaWNhdGVBdXRob3JpdGllcz86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgY2VydGlmaWNhdGUgbXVzdCBiZSBwcmVzZW50IGluIHRoZSBBV1MgQ2VydGlmaWNhdGUgTWFuYWdlciAoQUNNKSBzZXJ2aWNlIGluIHRoZSBVUyBFYXN0IChOLiBWaXJnaW5pYSkgcmVnaW9uOiBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY2RrL2FwaS92Mi9kb2NzL2F3cy1jZGstbGliLmF3c19jbG91ZGZyb250LXJlYWRtZS5odG1sXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSG9zdGluZ0NlcnRpZmljYXRlIGV4dGVuZHMgQ29uc3RydWN0IHtcclxuXHJcbiAgICBwdWJsaWMgcHVibGljSG9zdGVkWm9uZTogcm91dGU1My5JSG9zdGVkWm9uZSB8IHVuZGVmaW5lZDtcclxuICAgIHB1YmxpYyBjZXJ0aWZpY2F0ZTogYWNtLkNlcnRpZmljYXRlIHwgdW5kZWZpbmVkO1xyXG4gICAgcHVibGljIGNhYUFtYXpvblJlY29yZDogcm91dGU1My5DYWFBbWF6b25SZWNvcmQgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IElIb3N0aW5nQ2VydGlmaWNhdGVQcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3RyaWN0Q2VydGlmaWNhdGVBdXRob3JpdGllcyA9IHByb3BzLnJlc3RyaWN0Q2VydGlmaWNhdGVBdXRob3JpdGllcyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHByb3BzLnJlc3RyaWN0Q2VydGlmaWNhdGVBdXRob3JpdGllcztcclxuXHJcbiAgICAgICAgY29uc3QgY29uZmlnID0gbmV3IENvbmZpZyh0aGlzLm5vZGUpO1xyXG4gICAgICAgIGNvbnN0IHN0YWdlID0gY29uZmlnLnN0YWdlKCk7XHJcblxyXG4gICAgICAgIC8vIFVzZSByb290L2JhcmUvYXBleCBkb21haW4gbmFtZSBmb3IgcHJvZHVjdGlvbiBvciBzdWJkb21haW4gZm9yIG90aGVyIEFXUyBhY2NvdW50IHN0YWdlcy5cclxuICAgICAgICBjb25zdCBkb21haW5OYW1lID0gc3RhZ2UgPT09ICdwcm9kJyA/IHByb3BzLnJvb3REb21haW5OYW1lIDogYCR7c3RhZ2V9LiR7cHJvcHMucm9vdERvbWFpbk5hbWV9YDtcclxuXHJcbiAgICAgICAgLy8gTG9va3VwIFJvdXRlNTMgcHVibGljIGhvc3RlZCB6b25lIGNyZWF0ZWQgYnkgb3JnLWZvcm1hdGlvbi5cclxuICAgICAgICAvLyBJZiBBV1MgYWNjb3VudCBkb2Vzbid0IGhhdmUgYSBob3N0ZWQgem9uZSBzdWJkb21haW4gdGhlbiBhIGNlcnRpZmljYXRlIHdpbGwgbm90IGJlIGNyZWF0ZWQuXHJcbiAgICAgICAgdGhpcy5wdWJsaWNIb3N0ZWRab25lID0gcm91dGU1My5QdWJsaWNIb3N0ZWRab25lLmZyb21Mb29rdXAodGhpcywgJ0xvb2t1cEhvc3RlZFpvbmUnLCB7IGRvbWFpbk5hbWUgfSk7XHJcblxyXG4gICAgICAgIC8vIFRPRE86ID8/PyBVc2UgdGhlIENhYUFtYXpvblJlY29yZCBjb25zdHJ1Y3QgdG8gZWFzaWx5IHJlc3RyaWN0IGNlcnRpZmljYXRlIGF1dGhvcml0aWVzIGFsbG93ZWQgdG8gaXNzdWUgY2VydGlmaWNhdGVzIGZvciBhIGRvbWFpbiB0byBBbWF6b24gb25seS5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucHVibGljSG9zdGVkWm9uZSkge1xyXG4gICAgICAgICAgICAvLyB0aGlzLmNlcnRpZmljYXRlID0gbmV3IGFjbS5DZXJ0aWZpY2F0ZSh0aGlzLCAnUHVibGljSG9zdGVkWm9uZUNlcnRpZmljYXRlJywge1xyXG4gICAgICAgICAgICAvLyAgICAgLy8gV2lsZGNhcmQgcHJvdGVjdHMgb25lIHN1YmRvbWFpbiBsZXZlbCBvbmx5IGUuZy4gKi5leGFtcGxlLmNvbSBjYW4gcHJvdGVjdCBsb2dpbi5leGFtcGxlLmNvbSwgYW5kIHRlc3QuZXhhbXBsZS5jb20sIGJ1dCBpdCBjYW5ub3QgcHJvdGVjdCB0ZXN0LmxvZ2luLmV4YW1wbGUuY29tXHJcbiAgICAgICAgICAgIC8vICAgICBkb21haW5OYW1lOiBgKi4ke2RvbWFpbk5hbWV9YCxcclxuICAgICAgICAgICAgLy8gICAgIC8vIFZhbGlkYXRlIGNlcnRpZmljYXRlIHZpYSBETlMgKGF1dG8gY3JlYXRlZCkuXHJcbiAgICAgICAgICAgIC8vICAgICB2YWxpZGF0aW9uOiBhY20uQ2VydGlmaWNhdGVWYWxpZGF0aW9uLmZyb21EbnModGhpcy5wdWJsaWNIb3N0ZWRab25lKSxcclxuICAgICAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBjcm9zcy1yZWdpb24gY2VydGlmaWNhdGUgKGluIHJlZ2lvbiB1cy1lYXN0LTEpLlxyXG4gICAgICAgICAgICAvLyBBQ00gY2VydGlmaWNhdGVzIHRoYXQgYXJlIHVzZWQgd2l0aCBDbG91ZEZyb250IC0tIG9yIGhpZ2hlci1sZXZlbCBjb25zdHJ1Y3RzIHdoaWNoIHJlbHkgb24gQ2xvdWRGcm9udCAtLSBtdXN0IGJlIGluIHRoZSB1cy1lYXN0LTEgcmVnaW9uLiBUaGUgRG5zVmFsaWRhdGVkQ2VydGlmaWNhdGUgY29uc3RydWN0IGV4aXN0cyB0byBmYWNpbGl0YXRlIGNyZWF0aW5nIHRoZXNlIGNlcnRpZmljYXRlcyBjcm9zcy1yZWdpb24uIFRoaXMgcmVzb3VyY2UgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIFJvdXRlNTMtYmFzZWQgRE5TIHZhbGlkYXRpb24uXHJcbiAgICAgICAgICAgIHRoaXMuY2VydGlmaWNhdGUgPSBuZXcgYWNtLkRuc1ZhbGlkYXRlZENlcnRpZmljYXRlKHRoaXMsICdQdWJsaWNIb3N0ZWRab25lQ2VydGlmaWNhdGUnLCB7XHJcbiAgICAgICAgICAgICAgICBob3N0ZWRab25lOiB0aGlzLnB1YmxpY0hvc3RlZFpvbmUsXHJcbiAgICAgICAgICAgICAgICBkb21haW5OYW1lOiBgKi4ke2RvbWFpbk5hbWV9YCxcclxuICAgICAgICAgICAgICAgIHJlZ2lvbjogJ3VzLWVhc3QtMScgLy8gbXVzdCBiZSBpbiB0aGUgdXMtZWFzdC0xIHJlZ2lvbiB0byB1c2Ugd2l0aCBDbG91ZEZyb250LlxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIENBQSByZWNvcmQgdG8gcmVzdHJpY3QgY2VydGlmaWNhdGUgYXV0aG9yaXRpZXMgYWxsb3dlZCB0byBpc3N1ZSBjZXJ0aWZpY2F0ZXMgZm9yIGEgZG9tYWluIHRvIEFtYXpvbiBvbmx5LlxyXG4gICAgICAgICAgICBpZiAocmVzdHJpY3RDZXJ0aWZpY2F0ZUF1dGhvcml0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhYUFtYXpvblJlY29yZCA9IG5ldyByb3V0ZTUzLkNhYUFtYXpvblJlY29yZCh0aGlzLCAnQ2FhQW1hem9uUmVjb3JkJywge1xyXG4gICAgICAgICAgICAgICAgICAgIHpvbmU6IHRoaXMucHVibGljSG9zdGVkWm9uZSxcclxuICAgICAgICAgICAgICAgICAgICBjb21tZW50OiAnUmVzdHJpY3QgY2VydGlmaWNhdGUgYXV0aG9yaXRpZXMgYWxsb3dlZCB0byBpc3N1ZSBjZXJ0aWZpY2F0ZXMgdG8gQW1hem9uIG9ubHkuJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFRPRE86IENyZWF0ZSBDbG91ZFdhdGNoIGFsYXJtLlxyXG4gICAgICAgICAgICAvLyB0aGlzLmNlcnRpZmljYXRlLm1ldHJpY0RheXNUb0V4cGlyeSgpLmNyZWF0ZUFsYXJtKHRoaXMsICdBbGFybScsIHtcclxuICAgICAgICAgICAgLy8gICAgIGNvbXBhcmlzb25PcGVyYXRvcjogY2xvdWR3YXRjaC5Db21wYXJpc29uT3BlcmF0b3IuTEVTU19USEFOX1RIUkVTSE9MRCxcclxuICAgICAgICAgICAgLy8gICAgIGV2YWx1YXRpb25QZXJpb2RzOiAxLFxyXG4gICAgICAgICAgICAvLyAgICAgdGhyZXNob2xkOiA0NSwgLy8gQXV0b21hdGljIHJvdGF0aW9uIGhhcHBlbnMgYmV0d2VlbiA2MCBhbmQgNDUgZGF5cyBiZWZvcmUgZXhwaXJ5XHJcbiAgICAgICAgICAgIC8vIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=