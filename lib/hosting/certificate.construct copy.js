"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Certificate = void 0;
const acm = require("aws-cdk-lib/aws-certificatemanager");
const route53 = require("aws-cdk-lib/aws-route53");
const constructs_1 = require("constructs");
const config_1 = require("../config/config");
class Certificate extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.outputs = {};
        const config = new config_1.Config(this.node);
        const stage = config.stage();
        // Use root/bare/apex domain name for production or subdomain for other AWS account stages.
        const stageDomainName = stage === 'prod' ? props.domainName : `${stage}.${props.domainName}`;
        // Lookup Route53 public hosted zone created by org-formation.
        // If AWS account doesn't have a hosted zone subdomain then a certificate will not be created.
        this.outputs.publicHostedZone = route53.PublicHostedZone.fromLookup(this, 'LookupHostedZone', { domainName: stageDomainName });
        if (this.outputs.publicHostedZone) {
            this.outputs.certificate = new acm.Certificate(this, 'Certificate', {
                // Wildcard protects one subdomain level only e.g. *.example.com can protect login.example.com, and test.example.com, but it cannot protect test.login.example.com
                domainName: `*.${stageDomainName}`,
                // Validate certificate via DNS (auto created).
                validation: acm.CertificateValidation.fromDns(this.outputs.publicHostedZone)
            });
        }
    }
}
exports.Certificate = Certificate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VydGlmaWNhdGUuY29uc3RydWN0IGNvcHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaG9zdGluZy9jZXJ0aWZpY2F0ZS5jb25zdHJ1Y3QgY29weS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBMEQ7QUFDMUQsbURBQW1EO0FBQ25ELDJDQUF1QztBQUN2Qyw2Q0FBMEM7QUFXMUMsTUFBYSxXQUFZLFNBQVEsc0JBQVM7SUFJdEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUF3QjtRQUM5RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBSGQsWUFBTyxHQUF3QixFQUF5QixDQUFDO1FBSzVELE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFN0IsMkZBQTJGO1FBQzNGLE1BQU0sZUFBZSxHQUFHLEtBQUssS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUU3Riw4REFBOEQ7UUFDOUQsOEZBQThGO1FBQzlGLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUUvSCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUU7Z0JBQ2hFLGtLQUFrSztnQkFDbEssVUFBVSxFQUFFLEtBQUssZUFBZSxFQUFFO2dCQUNsQywrQ0FBK0M7Z0JBQy9DLFVBQVUsRUFBRSxHQUFHLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7YUFDL0UsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDO0NBQ0o7QUExQkQsa0NBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYWNtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1jZXJ0aWZpY2F0ZW1hbmFnZXInO1xyXG5pbXBvcnQgKiBhcyByb3V0ZTUzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1yb3V0ZTUzJztcclxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XHJcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9jb25maWcnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQ2VydGlmaWNhdGVQcm9wcyB7XHJcbiAgICBkb21haW5OYW1lOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNlcnRpZmljYXRlT3V0cHV0cyB7XHJcbiAgICBwdWJsaWNIb3N0ZWRab25lOiByb3V0ZTUzLklIb3N0ZWRab25lO1xyXG4gICAgY2VydGlmaWNhdGU6IGFjbS5DZXJ0aWZpY2F0ZSB8IHVuZGVmaW5lZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENlcnRpZmljYXRlIGV4dGVuZHMgQ29uc3RydWN0IHtcclxuXHJcbiAgICBwdWJsaWMgb3V0cHV0czogSUNlcnRpZmljYXRlT3V0cHV0cyA9IHt9IGFzIElDZXJ0aWZpY2F0ZU91dHB1dHM7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IElDZXJ0aWZpY2F0ZVByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29uZmlnID0gbmV3IENvbmZpZyh0aGlzLm5vZGUpO1xyXG4gICAgICAgIGNvbnN0IHN0YWdlID0gY29uZmlnLnN0YWdlKCk7XHJcblxyXG4gICAgICAgIC8vIFVzZSByb290L2JhcmUvYXBleCBkb21haW4gbmFtZSBmb3IgcHJvZHVjdGlvbiBvciBzdWJkb21haW4gZm9yIG90aGVyIEFXUyBhY2NvdW50IHN0YWdlcy5cclxuICAgICAgICBjb25zdCBzdGFnZURvbWFpbk5hbWUgPSBzdGFnZSA9PT0gJ3Byb2QnID8gcHJvcHMuZG9tYWluTmFtZSA6IGAke3N0YWdlfS4ke3Byb3BzLmRvbWFpbk5hbWV9YDtcclxuXHJcbiAgICAgICAgLy8gTG9va3VwIFJvdXRlNTMgcHVibGljIGhvc3RlZCB6b25lIGNyZWF0ZWQgYnkgb3JnLWZvcm1hdGlvbi5cclxuICAgICAgICAvLyBJZiBBV1MgYWNjb3VudCBkb2Vzbid0IGhhdmUgYSBob3N0ZWQgem9uZSBzdWJkb21haW4gdGhlbiBhIGNlcnRpZmljYXRlIHdpbGwgbm90IGJlIGNyZWF0ZWQuXHJcbiAgICAgICAgdGhpcy5vdXRwdXRzLnB1YmxpY0hvc3RlZFpvbmUgPSByb3V0ZTUzLlB1YmxpY0hvc3RlZFpvbmUuZnJvbUxvb2t1cCh0aGlzLCAnTG9va3VwSG9zdGVkWm9uZScsIHsgZG9tYWluTmFtZTogc3RhZ2VEb21haW5OYW1lIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5vdXRwdXRzLnB1YmxpY0hvc3RlZFpvbmUpIHtcclxuICAgICAgICAgICAgdGhpcy5vdXRwdXRzLmNlcnRpZmljYXRlID0gbmV3IGFjbS5DZXJ0aWZpY2F0ZSh0aGlzLCAnQ2VydGlmaWNhdGUnLCB7XHJcbiAgICAgICAgICAgICAgICAvLyBXaWxkY2FyZCBwcm90ZWN0cyBvbmUgc3ViZG9tYWluIGxldmVsIG9ubHkgZS5nLiAqLmV4YW1wbGUuY29tIGNhbiBwcm90ZWN0IGxvZ2luLmV4YW1wbGUuY29tLCBhbmQgdGVzdC5leGFtcGxlLmNvbSwgYnV0IGl0IGNhbm5vdCBwcm90ZWN0IHRlc3QubG9naW4uZXhhbXBsZS5jb21cclxuICAgICAgICAgICAgICAgIGRvbWFpbk5hbWU6IGAqLiR7c3RhZ2VEb21haW5OYW1lfWAsXHJcbiAgICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSBjZXJ0aWZpY2F0ZSB2aWEgRE5TIChhdXRvIGNyZWF0ZWQpLlxyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogYWNtLkNlcnRpZmljYXRlVmFsaWRhdGlvbi5mcm9tRG5zKHRoaXMub3V0cHV0cy5wdWJsaWNIb3N0ZWRab25lKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19