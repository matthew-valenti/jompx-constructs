"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultRequestMappingTemplate = exports.AppSyncLambdaDefaultProps = void 0;
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
exports.AppSyncLambdaDefaultProps = {
    runtime: lambda.Runtime.NODEJS_14_X,
    timeout: cdk.Duration.seconds(8),
    bundling: {
        minify: true,
        sourceMap: true
    }
};
// AppSync VTL snippet to pass event params to Lambda resolver: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-programming-guide.html
// With no VTL, the Lambda event contains all properties below. However, selectionSetList is a child property of info.
// Thru trial and error there doesn't appear to be a way to add selectionSetList as a child property.
// We need VTL because this is the only known way to pass variables directly into the Lambda.
// However, when we specify any VTL we must specify all VTL. Adding data to the stash property results in an empty Lambda event.
// Stash variables can be added by appending additional VTL above this payload statement. i.e. $util.qr($ctx.stash.put("key", "value"))
// This VTL invokes a payload property which simply returns an object with properties (taken from the AppSync $context variable).
// Caution: payload should mimic a standard Lambda resolver (with no VTL). This object might change in the future.
// In theory, we could use a Lambda function instead of VTL but this should be much faster than invoking another Lambda.
exports.DefaultRequestMappingTemplate = `{
        "version" : "2018-05-29",
        "operation": "Invoke",
        "payload": {
            "arguments": $utils.toJson($context.arguments),
            "identity": $utils.toJson($context.identity),
            "source": $utils.toJson($context.source),
            "request": $utils.toJson($context.request),
            "prev": $utils.toJson($context.prev),
            "info": $utils.toJson($context.info),
            "stash": $utils.toJson($context.stash),
            "selectionSetList": $utils.toJson($context.info.selectionSetList)
        }
    }`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXN5bmMudHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBwLXN5bmMvYXBwLXN5bmMudHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsbUNBQW1DO0FBQ25DLGlEQUFpRDtBQThCcEMsUUFBQSx5QkFBeUIsR0FBOEM7SUFDaEYsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztJQUNuQyxPQUFPLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLFFBQVEsRUFBRTtRQUNOLE1BQU0sRUFBRSxJQUFJO1FBQ1osU0FBUyxFQUFFLElBQUk7S0FDbEI7Q0FDSixDQUFDO0FBMkRGLDhLQUE4SztBQUM5SyxzSEFBc0g7QUFDdEgscUdBQXFHO0FBQ3JHLDZGQUE2RjtBQUM3RixnSUFBZ0k7QUFDaEksdUlBQXVJO0FBQ3ZJLGlJQUFpSTtBQUNqSSxrSEFBa0g7QUFDbEgsd0hBQXdIO0FBQzNHLFFBQUEsNkJBQTZCLEdBQUc7Ozs7Ozs7Ozs7Ozs7TUFhdkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcclxuaW1wb3J0ICogYXMgYXBwc3luYyBmcm9tICdAYXdzLWNkay9hd3MtYXBwc3luYy1hbHBoYSc7XHJcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XHJcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSURhdGFTb3VyY2Uge1xyXG4gICAgW2tleTogc3RyaW5nXTogYXBwc3luYy5MYW1iZGFEYXRhU291cmNlO1xyXG59XHJcblxyXG4vLyBleHBvcnQgaW50ZXJmYWNlIElTY2hlbWFUeXBlcyB7XHJcbi8vICAgICBba2V5OiBzdHJpbmddOiBJU2NoZW1hSW5wdXRUeXBlO1xyXG4vLyB9XHJcbi8vIGV4cG9ydCB0eXBlIElTY2hlbWFJbnB1dFR5cGUgPSBJbnRlcmZhY2VUeXBlIHwgT2JqZWN0VHlwZSB8IElucHV0VHlwZTtcclxuXHJcbi8vIFR5cGVzY3JpcHQgaW5zdGFuY2VvZiBwcm9kdWNlcyB1bnByZWRpY3RhYmxlIHJlc3VsdHMgZHVlIHRvIHVzZSBvZiBleHRlbmRzIChlLmcuIG15T2JqZWN0VHlwZSBpbnN0YW5jZW9mIEludGVyZmFjZVR5cGUgcmV0dXJucyB0cnVlKS4gVXNlIGV4cGxpY2l0IHR5cGVzIGluc3RlYWQuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVNjaGVtYVR5cGVzIHtcclxuICAgIGVudW1UeXBlczoge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFwcHN5bmMuRW51bVR5cGU7XHJcbiAgICB9O1xyXG4gICAgaW5wdXRUeXBlczoge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFwcHN5bmMuSW5wdXRUeXBlO1xyXG4gICAgfTtcclxuICAgIGludGVyZmFjZVR5cGVzOiB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXTogYXBwc3luYy5JbnRlcmZhY2VUeXBlO1xyXG4gICAgfTtcclxuICAgIG9iamVjdFR5cGVzOiB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXTogYXBwc3luYy5PYmplY3RUeXBlO1xyXG4gICAgfTtcclxuICAgIHVuaW9uVHlwZXM6IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiBhcHBzeW5jLlVuaW9uVHlwZTtcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBBcHBTeW5jTGFtYmRhRGVmYXVsdFByb3BzOiBjZGsuYXdzX2xhbWJkYV9ub2RlanMuTm9kZWpzRnVuY3Rpb25Qcm9wcyA9IHtcclxuICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xNF9YLFxyXG4gICAgdGltZW91dDogY2RrLkR1cmF0aW9uLnNlY29uZHMoOCksXHJcbiAgICBidW5kbGluZzoge1xyXG4gICAgICAgIG1pbmlmeTogdHJ1ZSxcclxuICAgICAgICBzb3VyY2VNYXA6IHRydWVcclxuICAgIH1cclxufTtcclxuXHJcbi8qXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXBwU3luY1Jlc29sdmVyRXZlbnQ8VEFyZ3VtZW50cywgVFNvdXJjZSA9IFJlY29yZDxzdHJpbmcsIGFueT4gfCBudWxsPiB7XHJcbiAgICBhcmd1bWVudHM6IFRBcmd1bWVudHM7XHJcbiAgICBpZGVudGl0eT86IEFwcFN5bmNJZGVudGl0eTtcclxuICAgIHNvdXJjZTogVFNvdXJjZTtcclxuICAgIHJlcXVlc3Q6IHtcclxuICAgICAgICBoZWFkZXJzOiBBcHBTeW5jUmVzb2x2ZXJFdmVudEhlYWRlcnM7XHJcbiAgICB9O1xyXG4gICAgaW5mbzoge1xyXG4gICAgICAgIHNlbGVjdGlvblNldExpc3Q6IHN0cmluZ1tdO1xyXG4gICAgICAgIHNlbGVjdGlvblNldEdyYXBoUUw6IHN0cmluZztcclxuICAgICAgICBwYXJlbnRUeXBlTmFtZTogc3RyaW5nO1xyXG4gICAgICAgIGZpZWxkTmFtZTogc3RyaW5nO1xyXG4gICAgICAgIHZhcmlhYmxlczogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcclxuICAgIH07XHJcbiAgICBwcmV2OiB7IHJlc3VsdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB9IHwgbnVsbDtcclxuICAgIHN0YXNoOiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xyXG59XHJcbiovXHJcblxyXG4vLyBUT0RPOiBDdXJyZW50bHkgYSBjb3B5IG9mIEFwcFN5bmNSZXNvbHZlckV2ZW50IENESyB2MS4gUmVwbGFjZSB3aXRoIHYyIHdoZW4gYXZhaWxhYmxlIG9yIGNsZWFudXAgdHlwZXMuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFwcFN5bmNSZXNvbHZlckV2ZW50IHtcclxuICAgIGFyZ3VtZW50czogYW55O1xyXG4gICAgaWRlbnRpdHk6IGFueTtcclxuICAgIHNvdXJjZTogYW55O1xyXG4gICAgcmVxdWVzdDogYW55O1xyXG4gICAgaW5mbzogYW55O1xyXG4gICAgcHJldjogYW55O1xyXG4gICAgc3Rhc2g6IHsgW2tleTogc3RyaW5nXTogYW55IH07XHJcbiAgICBzZWxlY3Rpb25TZXRMaXN0OiBzdHJpbmdbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQXBwU3luY09wZXJhdGlvbkFyZ3Mge1xyXG4gICAgW2tleTogc3RyaW5nXTogYXBwc3luYy5HcmFwaHFsVHlwZTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQXBwU3luY0Nvbm5lY3Rpb24ge1xyXG4gICAgZWRnZXM/OiBbe1xyXG4gICAgICAgIGN1cnNvcj86IHN0cmluZztcclxuICAgICAgICBub2RlOiBhbnk7XHJcbiAgICB9XTtcclxuICAgIHBhZ2VJbmZvOiBJQXBwU3luY1BhZ2VJbmZvT2Zmc2V0IHwgSUFwcFN5bmNQYWdlSW5mb0N1cnNvcjtcclxuICAgIHRvdGFsQ291bnQ/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFwcFN5bmNQYWdlSW5mb09mZnNldCB7XHJcbiAgICBza2lwOiBudW1iZXI7XHJcbiAgICBsaW1pdDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElBcHBTeW5jUGFnZUluZm9DdXJzb3Ige1xyXG4gICAgaGFzUHJldmlvdXNQYWdlOiBib29sZWFuO1xyXG4gICAgaGFzTmV4dFBhZ2U6IGJvb2xlYW47XHJcbiAgICBzdGFydEN1cnNvcjogc3RyaW5nO1xyXG4gICAgZW5kQ3Vyc29yOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8vIEFwcFN5bmMgVlRMIHNuaXBwZXQgdG8gcGFzcyBldmVudCBwYXJhbXMgdG8gTGFtYmRhIHJlc29sdmVyOiBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vYXBwc3luYy9sYXRlc3QvZGV2Z3VpZGUvcmVzb2x2ZXItbWFwcGluZy10ZW1wbGF0ZS1yZWZlcmVuY2UtcHJvZ3JhbW1pbmctZ3VpZGUuaHRtbFxyXG4vLyBXaXRoIG5vIFZUTCwgdGhlIExhbWJkYSBldmVudCBjb250YWlucyBhbGwgcHJvcGVydGllcyBiZWxvdy4gSG93ZXZlciwgc2VsZWN0aW9uU2V0TGlzdCBpcyBhIGNoaWxkIHByb3BlcnR5IG9mIGluZm8uXHJcbi8vIFRocnUgdHJpYWwgYW5kIGVycm9yIHRoZXJlIGRvZXNuJ3QgYXBwZWFyIHRvIGJlIGEgd2F5IHRvIGFkZCBzZWxlY3Rpb25TZXRMaXN0IGFzIGEgY2hpbGQgcHJvcGVydHkuXHJcbi8vIFdlIG5lZWQgVlRMIGJlY2F1c2UgdGhpcyBpcyB0aGUgb25seSBrbm93biB3YXkgdG8gcGFzcyB2YXJpYWJsZXMgZGlyZWN0bHkgaW50byB0aGUgTGFtYmRhLlxyXG4vLyBIb3dldmVyLCB3aGVuIHdlIHNwZWNpZnkgYW55IFZUTCB3ZSBtdXN0IHNwZWNpZnkgYWxsIFZUTC4gQWRkaW5nIGRhdGEgdG8gdGhlIHN0YXNoIHByb3BlcnR5IHJlc3VsdHMgaW4gYW4gZW1wdHkgTGFtYmRhIGV2ZW50LlxyXG4vLyBTdGFzaCB2YXJpYWJsZXMgY2FuIGJlIGFkZGVkIGJ5IGFwcGVuZGluZyBhZGRpdGlvbmFsIFZUTCBhYm92ZSB0aGlzIHBheWxvYWQgc3RhdGVtZW50LiBpLmUuICR1dGlsLnFyKCRjdHguc3Rhc2gucHV0KFwia2V5XCIsIFwidmFsdWVcIikpXHJcbi8vIFRoaXMgVlRMIGludm9rZXMgYSBwYXlsb2FkIHByb3BlcnR5IHdoaWNoIHNpbXBseSByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXMgKHRha2VuIGZyb20gdGhlIEFwcFN5bmMgJGNvbnRleHQgdmFyaWFibGUpLlxyXG4vLyBDYXV0aW9uOiBwYXlsb2FkIHNob3VsZCBtaW1pYyBhIHN0YW5kYXJkIExhbWJkYSByZXNvbHZlciAod2l0aCBubyBWVEwpLiBUaGlzIG9iamVjdCBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cclxuLy8gSW4gdGhlb3J5LCB3ZSBjb3VsZCB1c2UgYSBMYW1iZGEgZnVuY3Rpb24gaW5zdGVhZCBvZiBWVEwgYnV0IHRoaXMgc2hvdWxkIGJlIG11Y2ggZmFzdGVyIHRoYW4gaW52b2tpbmcgYW5vdGhlciBMYW1iZGEuXHJcbmV4cG9ydCBjb25zdCBEZWZhdWx0UmVxdWVzdE1hcHBpbmdUZW1wbGF0ZSA9IGB7XHJcbiAgICAgICAgXCJ2ZXJzaW9uXCIgOiBcIjIwMTgtMDUtMjlcIixcclxuICAgICAgICBcIm9wZXJhdGlvblwiOiBcIkludm9rZVwiLFxyXG4gICAgICAgIFwicGF5bG9hZFwiOiB7XHJcbiAgICAgICAgICAgIFwiYXJndW1lbnRzXCI6ICR1dGlscy50b0pzb24oJGNvbnRleHQuYXJndW1lbnRzKSxcclxuICAgICAgICAgICAgXCJpZGVudGl0eVwiOiAkdXRpbHMudG9Kc29uKCRjb250ZXh0LmlkZW50aXR5KSxcclxuICAgICAgICAgICAgXCJzb3VyY2VcIjogJHV0aWxzLnRvSnNvbigkY29udGV4dC5zb3VyY2UpLFxyXG4gICAgICAgICAgICBcInJlcXVlc3RcIjogJHV0aWxzLnRvSnNvbigkY29udGV4dC5yZXF1ZXN0KSxcclxuICAgICAgICAgICAgXCJwcmV2XCI6ICR1dGlscy50b0pzb24oJGNvbnRleHQucHJldiksXHJcbiAgICAgICAgICAgIFwiaW5mb1wiOiAkdXRpbHMudG9Kc29uKCRjb250ZXh0LmluZm8pLFxyXG4gICAgICAgICAgICBcInN0YXNoXCI6ICR1dGlscy50b0pzb24oJGNvbnRleHQuc3Rhc2gpLFxyXG4gICAgICAgICAgICBcInNlbGVjdGlvblNldExpc3RcIjogJHV0aWxzLnRvSnNvbigkY29udGV4dC5pbmZvLnNlbGVjdGlvblNldExpc3QpXHJcbiAgICAgICAgfVxyXG4gICAgfWA7XHJcbiJdfQ==