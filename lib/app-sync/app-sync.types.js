"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppSyncLambdaDefaultProps = void 0;
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
exports.AppSyncLambdaDefaultProps = {
    runtime: lambda.Runtime.NODEJS_16_X,
    timeout: cdk.Duration.seconds(5),
    bundling: {
        minify: true,
        sourceMap: true
    }
};
const paginationType = ['cursor', 'offset'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXN5bmMudHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBwLXN5bmMvYXBwLXN5bmMudHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsbUNBQW1DO0FBQ25DLGlEQUFpRDtBQStCcEMsUUFBQSx5QkFBeUIsR0FBOEM7SUFDaEYsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztJQUNuQyxPQUFPLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLFFBQVEsRUFBRTtRQUNOLE1BQU0sRUFBRSxJQUFJO1FBQ1osU0FBUyxFQUFFLElBQUk7S0FDbEI7Q0FDSixDQUFDO0FBd0dGLE1BQU0sY0FBYyxHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xyXG5pbXBvcnQgKiBhcyBhcHBzeW5jIGZyb20gJ0Bhd3MtY2RrL2F3cy1hcHBzeW5jLWFscGhhJztcclxuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcclxuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xyXG5pbXBvcnQgdHlwZSB7IEFwcFN5bmNSZXNvbHZlckV2ZW50IH0gZnJvbSAnYXdzLWxhbWJkYSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElEYXRhU291cmNlIHtcclxuICAgIFtrZXk6IHN0cmluZ106IGFwcHN5bmMuTGFtYmRhRGF0YVNvdXJjZTtcclxufVxyXG5cclxuLy8gZXhwb3J0IGludGVyZmFjZSBJU2NoZW1hVHlwZXMge1xyXG4vLyAgICAgW2tleTogc3RyaW5nXTogSVNjaGVtYUlucHV0VHlwZTtcclxuLy8gfVxyXG4vLyBleHBvcnQgdHlwZSBJU2NoZW1hSW5wdXRUeXBlID0gSW50ZXJmYWNlVHlwZSB8IE9iamVjdFR5cGUgfCBJbnB1dFR5cGU7XHJcblxyXG4vLyBUeXBlc2NyaXB0IGluc3RhbmNlb2YgcHJvZHVjZXMgdW5wcmVkaWN0YWJsZSByZXN1bHRzIGR1ZSB0byB1c2Ugb2YgZXh0ZW5kcyAoZS5nLiBteU9iamVjdFR5cGUgaW5zdGFuY2VvZiBJbnRlcmZhY2VUeXBlIHJldHVybnMgdHJ1ZSkuIFVzZSBleHBsaWNpdCB0eXBlcyBpbnN0ZWFkLlxyXG5leHBvcnQgaW50ZXJmYWNlIElTY2hlbWFUeXBlcyB7XHJcbiAgICBlbnVtVHlwZXM6IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiBhcHBzeW5jLkVudW1UeXBlO1xyXG4gICAgfTtcclxuICAgIGlucHV0VHlwZXM6IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiBhcHBzeW5jLklucHV0VHlwZTtcclxuICAgIH07XHJcbiAgICBpbnRlcmZhY2VUeXBlczoge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFwcHN5bmMuSW50ZXJmYWNlVHlwZTtcclxuICAgIH07XHJcbiAgICBvYmplY3RUeXBlczoge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFwcHN5bmMuT2JqZWN0VHlwZTtcclxuICAgIH07XHJcbiAgICB1bmlvblR5cGVzOiB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXTogYXBwc3luYy5VbmlvblR5cGU7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQXBwU3luY0xhbWJkYURlZmF1bHRQcm9wczogY2RrLmF3c19sYW1iZGFfbm9kZWpzLk5vZGVqc0Z1bmN0aW9uUHJvcHMgPSB7XHJcbiAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTZfWCxcclxuICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDUpLFxyXG4gICAgYnVuZGxpbmc6IHtcclxuICAgICAgICBtaW5pZnk6IHRydWUsXHJcbiAgICAgICAgc291cmNlTWFwOiB0cnVlXHJcbiAgICB9XHJcbn07XHJcblxyXG4vKlxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcFN5bmNSZXNvbHZlckV2ZW50PFRBcmd1bWVudHMsIFRTb3VyY2UgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgbnVsbD4ge1xyXG4gICAgYXJndW1lbnRzOiBUQXJndW1lbnRzO1xyXG4gICAgaWRlbnRpdHk/OiBBcHBTeW5jSWRlbnRpdHk7XHJcbiAgICBzb3VyY2U6IFRTb3VyY2U7XHJcbiAgICByZXF1ZXN0OiB7XHJcbiAgICAgICAgaGVhZGVyczogQXBwU3luY1Jlc29sdmVyRXZlbnRIZWFkZXJzO1xyXG4gICAgfTtcclxuICAgIGluZm86IHtcclxuICAgICAgICBzZWxlY3Rpb25TZXRMaXN0OiBzdHJpbmdbXTtcclxuICAgICAgICBzZWxlY3Rpb25TZXRHcmFwaFFMOiBzdHJpbmc7XHJcbiAgICAgICAgcGFyZW50VHlwZU5hbWU6IHN0cmluZztcclxuICAgICAgICBmaWVsZE5hbWU6IHN0cmluZztcclxuICAgICAgICB2YXJpYWJsZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH07XHJcbiAgICB9O1xyXG4gICAgcHJldjogeyByZXN1bHQ6IHsgW2tleTogc3RyaW5nXTogYW55IH0gfSB8IG51bGw7XHJcbiAgICBzdGFzaDogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcclxufVxyXG4qL1xyXG5cclxuZXhwb3J0IHR5cGUgSUFwcFN5bmNSZXNvbHZlckV2ZW50ID0gQXBwU3luY1Jlc29sdmVyRXZlbnQ8YW55PlxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQXBwU3luY09wZXJhdGlvbkZpZWxkcyB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBhcHBzeW5jLkdyYXBocWxUeXBlIHwgSUFwcFN5bmNPcGVyYXRpb25GaWVsZHM7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFwcFN5bmNDb25uZWN0aW9uIHtcclxuICAgIGVkZ2VzPzogW3tcclxuICAgICAgICBjdXJzb3I/OiBzdHJpbmc7XHJcbiAgICAgICAgbm9kZTogYW55O1xyXG4gICAgfV07XHJcbiAgICBwYWdlSW5mbzogSUFwcFN5bmNQYWdlSW5mb09mZnNldCB8IElBcHBTeW5jUGFnZUluZm9DdXJzb3I7XHJcbiAgICB0b3RhbENvdW50PzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElBcHBTeW5jUGFnZUluZm9PZmZzZXQge1xyXG4gICAgc2tpcDogbnVtYmVyO1xyXG4gICAgbGltaXQ6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQXBwU3luY1BhZ2VJbmZvQ3Vyc29yIHtcclxuICAgIGhhc1ByZXZpb3VzUGFnZTogYm9vbGVhbjtcclxuICAgIGhhc05leHRQYWdlOiBib29sZWFuO1xyXG4gICAgc3RhcnRDdXJzb3I6IHN0cmluZztcclxuICAgIGVuZEN1cnNvcjogc3RyaW5nO1xyXG59XHJcblxyXG4vLyBMaXN0IG9mIG5lc3RlZCBJRmllbGRzLlxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcFN5bmNJRmllbGRzIHtcclxuICAgIFtrZXk6IHN0cmluZ106IEFwcFN5bmNJRmllbGRzIHwgYXBwc3luYy5JRmllbGQ7XHJcbn1cclxuXHJcbi8qXHJcbi8vIEV4YW1wbGUgSUFNIGlkZW50aXR5IGZyb20gQXBwU3luYyBldmVudC5cclxuaWRlbnRpdHk6IHtcclxuICAgIGFjY291bnRJZDogJzA2NjIwOTY1MzU2NycsXHJcbiAgICBjb2duaXRvSWRlbnRpdHlBdXRoUHJvdmlkZXI6IG51bGwsXHJcbiAgICBjb2duaXRvSWRlbnRpdHlBdXRoVHlwZTogbnVsbCxcclxuICAgIGNvZ25pdG9JZGVudGl0eUlkOiBudWxsLFxyXG4gICAgY29nbml0b0lkZW50aXR5UG9vbElkOiBudWxsLFxyXG4gICAgc291cmNlSXA6IFsgJzU0LjI0MC4yMzAuMjQ0JyBdLFxyXG4gICAgdXNlckFybjogJ2Fybjphd3M6c3RzOjowNjYyMDk2NTM1Njc6YXNzdW1lZC1yb2xlL0FXU1Jlc2VydmVkU1NPX0FkbWluaXN0cmF0b3JBY2Nlc3NfOTVhY2RiYzgxYzg0NGM1Ni9hZG1pbicsXHJcbiAgICB1c2VybmFtZTogJ0FST0FRNjJUSEVNNzZYUTZUT1VQSzphZG1pbidcclxufVxyXG4vLyBFeGFtcGxlIENvZ25pdG8gY2xhaW0gZnJvbSBBcHBTeW5jIGV2ZW50LlxyXG5pZGVudGl0eToge1xyXG4gICAgY2xhaW1zOiB7XHJcbiAgICAgIHN1YjogJzQyODUzMmUzLTRlYjYtNDg4OS1iYTk0LTcyNmZmZTBmMGQ4NycsXHJcbiAgICAgICdjb2duaXRvOmdyb3Vwcyc6IFtBcnJheV0sXHJcbiAgICAgIGVtYWlsX3ZlcmlmaWVkOiB0cnVlLFxyXG4gICAgICBpc3M6ICdodHRwczovL2NvZ25pdG8taWRwLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tL3VzLXdlc3QtMl8xZGVTdGdYamMnLFxyXG4gICAgICAnY29nbml0bzp1c2VybmFtZSc6ICc0Mjg1MzJlMy00ZWI2LTQ4ODktYmE5NC03MjZmZmUwZjBkODcnLFxyXG4gICAgICBvcmlnaW5fanRpOiAnNWNjOTkwNTAtMDhlMS00ZjUwLThjNzctMDc2MDcyYjg3MWIwJyxcclxuICAgICAgYXVkOiAnN2pqa2NrMzVqcW4zZDljMTNrMWh0M2ZpYmsnLFxyXG4gICAgICBldmVudF9pZDogJ2VmZDBhNWQ5LTc4NWMtNGI0ZS04YmQ5LTUyMGUzNWExZmM2MycsXHJcbiAgICAgIHRva2VuX3VzZTogJ2lkJyxcclxuICAgICAgYXV0aF90aW1lOiAxNjUyNjYxMDkxLFxyXG4gICAgICBleHA6IDE2NTI2NjQ2OTEsXHJcbiAgICAgIGlhdDogMTY1MjY2MTA5MSxcclxuICAgICAganRpOiAnYjFmNzFlNGItMWZhMi00YzFjLWI0ODMtZmM5MjNhY2FmZDM0JyxcclxuICAgICAgZW1haWw6ICdtYXR0aGV3QGpvbXB4LmNvbSdcclxuICAgIH0sXHJcbiAgICBkZWZhdWx0QXV0aFN0cmF0ZWd5OiAnREVOWScsXHJcbiAgICBncm91cHM6IFsgJ2FkbWluJyBdLFxyXG4gICAgaXNzdWVyOiAnaHR0cHM6Ly9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbS91cy13ZXN0LTJfMWRlU3RnWGpjJyxcclxuICAgIHNvdXJjZUlwOiBbICc2Ny41Mi4xNjAuMjE0JyBdLFxyXG4gICAgc3ViOiAnNDI4NTMyZTMtNGViNi00ODg5LWJhOTQtNzI2ZmZlMGYwZDg3JyxcclxuICAgIHVzZXJuYW1lOiAnNDI4NTMyZTMtNGViNi00ODg5LWJhOTQtNzI2ZmZlMGYwZDg3J1xyXG59XHJcbiovXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElBcHBTeW5jTWV0aG9kUHJvcHNDb2duaXRvIHtcclxuICAgIHN1Yjogc3RyaW5nO1xyXG4gICAgZW1haWw6IHN0cmluZztcclxuICAgIGdyb3Vwczogc3RyaW5nW107XHJcbiAgICBhdXRob3JpemF0aW9uOiBzdHJpbmc7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBJQXBwU3luY01ldGhvZFByb3BzIHtcclxuICAgIGNvZ25pdG8/OiBJQXBwU3luY01ldGhvZFByb3BzQ29nbml0bztcclxuICAgIGV2ZW50OiBhbnk7XHJcbn1cclxuXHJcbmNvbnN0IHBhZ2luYXRpb25UeXBlID0gWydjdXJzb3InLCAnb2Zmc2V0J107XHJcbmV4cG9ydCB0eXBlIElBcHBTeW5jUGFnaW5hdGlvblR5cGUgPSB0eXBlb2YgcGFnaW5hdGlvblR5cGVbbnVtYmVyXTsiXX0=