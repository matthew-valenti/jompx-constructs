"use strict";
// TODO: Where is the AppSync event type i.e. AppSyncResolverEvent? cdk.aws_lambda_event_sources.ApiEventSource
// import * as cdk from 'aws-cdk-lib';
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppSyncDatasource = void 0;
class AppSyncDatasource {
    constructor(props) {
        this.props = props;
    }
}
exports.AppSyncDatasource = AppSyncDatasource;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcHAtc3luYy9kYXRhc291cmNlcy9kYXRhc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwrR0FBK0c7QUFDL0csc0NBQXNDOzs7QUErRXRDLE1BQXNCLGlCQUFpQjtJQUluQyxZQUFZLEtBQTRCO1FBQ3BDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7Q0FZSjtBQWxCRCw4Q0FrQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUT0RPOiBXaGVyZSBpcyB0aGUgQXBwU3luYyBldmVudCB0eXBlIGkuZS4gQXBwU3luY1Jlc29sdmVyRXZlbnQ/IGNkay5hd3NfbGFtYmRhX2V2ZW50X3NvdXJjZXMuQXBpRXZlbnRTb3VyY2VcclxuLy8gaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcclxuXHJcbi8qXHJcbmV2ZW50IHtcclxuICBhcmd1bWVudHM6IHsgZmlsdGVyOiB7IGE6IDEgfSwgc2tpcDogMTAsIGxpbWl0OiAxMCB9LFxyXG4gIGlkZW50aXR5OiB7XHJcbiAgICBhY2NvdW50SWQ6ICcwNjYyMDk2NTM1NjcnLFxyXG4gICAgY29nbml0b0lkZW50aXR5QXV0aFByb3ZpZGVyOiBudWxsLFxyXG4gICAgY29nbml0b0lkZW50aXR5QXV0aFR5cGU6IG51bGwsXHJcbiAgICBjb2duaXRvSWRlbnRpdHlJZDogbnVsbCxcclxuICAgIGNvZ25pdG9JZGVudGl0eVBvb2xJZDogbnVsbCxcclxuICAgIHNvdXJjZUlwOiBbICcyMDUuMjUxLjIzMy4zMycgXSxcclxuICAgIHVzZXJBcm46ICdhcm46YXdzOnN0czo6MDY2MjA5NjUzNTY3OmFzc3VtZWQtcm9sZS9BV1NSZXNlcnZlZFNTT19BZG1pbmlzdHJhdG9yQWNjZXNzXzk1YWNkYmM4MWM4NDRjNTYvYWRtaW4nLFxyXG4gICAgdXNlcm5hbWU6ICdBUk9BUTYyVEhFTTc2WFE2VE9VUEs6YWRtaW4nXHJcbiAgfSxcclxuICBzb3VyY2U6IG51bGwsXHJcbiAgcmVxdWVzdDoge1xyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICAnY29udGVudC1lbmNvZGluZyc6ICdhbXotMS4wJyxcclxuICAgICAgJ3gtZm9yd2FyZGVkLWZvcic6ICcyMDUuMjUxLjIzMy4zMywgNzAuMTMyLjMxLjcyJyxcclxuICAgICAgJ2Nsb3VkZnJvbnQtdmlld2VyLWNvdW50cnknOiAnVVMnLFxyXG4gICAgICAnY2xvdWRmcm9udC1pcy10YWJsZXQtdmlld2VyJzogJ2ZhbHNlJyxcclxuICAgICAgJ3gtYW16bi1yZXF1ZXN0aWQnOiAnZjAzZWVhMTUtMDNhNS00YmRkLTg3YTEtZTQwMjZiOGY1NWMyJyxcclxuICAgICAgdmlhOiAnMS4xIDBhZWJmM2ZlNDMzZmY5NmU2OGQ3ODVmYWQ0ZWE0YzBlLmNsb3VkZnJvbnQubmV0IChDbG91ZEZyb250KScsXHJcbiAgICAgICdjbG91ZGZyb250LWZvcndhcmRlZC1wcm90byc6ICdodHRwcycsXHJcbiAgICAgICdjb250ZW50LWxlbmd0aCc6ICcyMjcnLFxyXG4gICAgICBob3N0OiAncmQ3YjR4MnJiamhhN2sydGk2ejZ5amVkbHkuYXBwc3luYy1hcGkudXMtd2VzdC0yLmFtYXpvbmF3cy5jb20nLFxyXG4gICAgICAneC1mb3J3YXJkZWQtcHJvdG8nOiAnaHR0cHMnLFxyXG4gICAgICAndXNlci1hZ2VudCc6ICdhd3MtaW50ZXJuYWwvMyBhd3Mtc2RrLWphdmEvMS4xMi4xODIgTGludXgvNS40LjE4MS0xMDkuMzU0LmFtem4yaW50Lng4Nl82NCBPcGVuSkRLXzY0LUJpdF9TZXJ2ZXJfVk0vMjUuMzIyLWIwNiBqYXZhLzEuOC4wXzMyMiBrb3RsaW4vMS4zLjcyIHZlbmRvci9PcmFjbGVfQ29ycG9yYXRpb24gY2ZnL3JldHJ5LW1vZGUvc3RhbmRhcmQnLFxyXG4gICAgICAnY2xvdWRmcm9udC1pcy1tb2JpbGUtdmlld2VyJzogJ2ZhbHNlJyxcclxuICAgICAgYWNjZXB0OiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0JyxcclxuICAgICAgJ3gtYW16LWRhdGUnOiAnMjAyMjA0MTBUMjE1MzQ4WicsXHJcbiAgICAgICdjbG91ZGZyb250LWlzLXNtYXJ0dHYtdmlld2VyJzogJ2ZhbHNlJyxcclxuICAgICAgJ2Ftei1zZGstcmVxdWVzdCc6ICd0dGw9MjAyMjA0MTBUMjE1NDQ4WjthdHRlbXB0PTE7bWF4PTEnLFxyXG4gICAgICAnYW16LXNkay1pbnZvY2F0aW9uLWlkJzogJzQ2YTBlNDlmLWYwMDktY2JhYi04MDRlLTU5MjQxZmYwMjhlMycsXHJcbiAgICAgICd4LWFtei1zZWN1cml0eS10b2tlbic6ICdJUW9KYjNKcFoybHVYMlZqRUhVYUNYVnpMWGRsYzNRdE1pSkdNRVFDSUNDcjNQOFN1ZFJEdmVQSzhUV1l2Yk01Vi8rbVpqcW91V3RkL3BEcnFwbXFBaUJnMWc4bE9YMnhqZytTbmRGUmZaNGlMTU05ZGJPaTRGcjJoWHU5REl5cm55cjJBd2dlRUFBYUREQTJOakl3T1RZMU16VTJOeUlNbm9rOElkYzI0NUJkNGwvUUt0TURRNnByem9heXk2dTRpNmdZb0pmWHdLeWoxWlZmUmFnVDZnMG5uNHB5UnM1cmNGMldkb25nMXlZTUxsK0NDY1RaSVBGeENIZ3R2bkdlb1JFVnl5eUp3QTQ4SVI5YmtHVkEzcVZrRC81WUt3Um0wZ2p2UER2eHlVU1EyWFFQWitqMmhudDhxc25ucVJPbTNIVXdZTzhzRlRrQ2lPb2E5akk3elVUSjU0ZmR1bi8zbG5NaFNMZU1jUE9sMFVGTHBtVnArbnJOK0s5ZFNnNHN1SGVtbExEWEVvenJOQVorc3NVb2VvUThFUFgydHRsQzVjaS9OWUt6TU45V3BEcWErUDhTalJOOWt6TW1JMm5OY1ZMOWRSSk9SaWVxVVJKYkZBaUZ6WjBFcTMzMnpYY0tLSzdvQXgwczU3VGU1R25XZjcxekQ4djlPUVgyTWRKczFxc01aOGUrYmI1VkorR2kxTGxKKzRMRXpHaEsydFpsSWp2QzRUT3NwemR1Y3ZpTmtkL25mdkxZQTRrTU5DLzIzeVYrVG94R3UxTUp5dk9KNzltZnhETC9SdnBQWUl3OFd6Q3JSbkora3RPL1UyOXM3T2NxeUxtaWRpRUE5aitEdEdqa042ZkdweWgyMEI2TS9aYU5OT04yVUZYUTNkWDB2eWlZSXQ4NVZGZGg3THNNenkyUi9RRUswb1hDUHVXWnFKNzJOZ2lqQ3FCcUU2NmhONUFURFgzRE10QUlnY1U4VzNUaTZaOUpaV01zd0UzTzNGZHcvMjZBL0tCWHNMVVhLbVkxQ3NtSGZ4aHhja2NQMHp3WFliVUtGZmNpWVdjOElIb3dzdjNNa2dZNm1RSTYwVUdVSGNxSisybXNzSmRhbTRZak41QWU3RkVwVU9FTG9ycEFDTCsxaDcrdUFuSW5ScFZScHlkK0FhN090Sit0a0tML0ZKRXBEd3pTdklrKzZ0ZitHWUMvUW1rdVVYUEJFcGhPYi8yL24vYXFGamp0QkJacjducng2eUJKbFdmS3JvZDRSN0dRa0kxOWowZlNXOE05UzA2aERORlF6Njk0ckd4OGtQcU1KZmxJTzZ5TnREemlnNU9YckQxZHlKZEVCVUNyYzBaYUdJeC9vY0VacGxrSFdTMk1oaC9pYWtFamdic1RWTmI2YzFoUFFBTE92Vno3Z0YrU0JRcTNDRS9mc2V5ZE9VSVRRY1I4eGFmZ21ETzd4ZEYwdXNMWXQ4RFhtNTh5YUVkK3BOdHI1dTd2czVhRnNwb2ZQTGhJZHR0cksxS25HOUxabExmbFphOFpoVXZKaWZSaUwrdkJWblFSYlJiNUdOVWhaNzkveE1ocGRWOFJnUT09JyxcclxuICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgJ3gtYW16LWNmLWlkJzogJy1TMkFWRXpZeWItWG94MkJMOW5EQ2toM05YQW9NSnZpbG1CYWRTMFhIM0pBeFhIdndTMFNNdz09JyxcclxuICAgICAgJ3gtYW16bi10cmFjZS1pZCc6ICdSb290PTEtNjI1MzUxZWMtMjkwYjNmNjg2MmI5OWE2OTMxZjM2YmI5JyxcclxuICAgICAgYXV0aG9yaXphdGlvbjogJ0FXUzQtSE1BQy1TSEEyNTYgQ3JlZGVudGlhbD1BU0lBUTYyVEhFTTdTN0hUT0NHVi8yMDIyMDQxMC91cy13ZXN0LTIvYXBwc3luYy9hd3M0X3JlcXVlc3QsIFNpZ25lZEhlYWRlcnM9YWNjZXB0O2NvbnRlbnQtZW5jb2Rpbmc7Y29udGVudC1sZW5ndGg7Y29udGVudC10eXBlO2hvc3Q7eC1hbXotZGF0ZTt4LWFtei1zZWN1cml0eS10b2tlbiwgU2lnbmF0dXJlPTk0YzYzYWYwN2FiMGY4MjRiYTAyYjBhMzMzNGVhZTk5MGVlMGZlY2E5ODhjMjAwNjhjMGI4NmRmNjU1ODRlNTknLFxyXG4gICAgICAnYW16LXNkay1yZXRyeSc6ICcwLzAvNTAwJyxcclxuICAgICAgJ2Nsb3VkZnJvbnQtaXMtZGVza3RvcC12aWV3ZXInOiAndHJ1ZScsXHJcbiAgICAgICd4LWZvcndhcmRlZC1wb3J0JzogJzQ0MydcclxuICAgIH0sXHJcbiAgICBkb21haW5OYW1lOiBudWxsXHJcbiAgfSxcclxuICBwcmV2OiBudWxsLFxyXG4gIGluZm86IHtcclxuICAgIHNlbGVjdGlvblNldExpc3Q6IFtcclxuICAgICAgJ2VkZ2VzJyxcclxuICAgICAgJ2VkZ2VzL25vZGUnLFxyXG4gICAgICAnZWRnZXMvbm9kZS9pZCcsXHJcbiAgICAgICdlZGdlcy9ub2RlL3RpdGxlJyxcclxuICAgICAgJ2VkZ2VzL25vZGUvbWNvbW1lbnRzJyxcclxuICAgICAgJ2VkZ2VzL25vZGUvbWNvbW1lbnRzL2lkJyxcclxuICAgICAgJ2VkZ2VzL25vZGUvbWNvbW1lbnRzL2h0bWwnXHJcbiAgICBdLFxyXG4gICAgc2VsZWN0aW9uU2V0R3JhcGhRTDogJ3tcXG4nICtcclxuICAgICAgJyAgZWRnZXMge1xcbicgK1xyXG4gICAgICAnICAgIG5vZGUge1xcbicgK1xyXG4gICAgICAnICAgICAgaWRcXG4nICtcclxuICAgICAgJyAgICAgIHRpdGxlXFxuJyArXHJcbiAgICAgICcgICAgICBtY29tbWVudHMge1xcbicgK1xyXG4gICAgICAnICAgICAgICBpZFxcbicgK1xyXG4gICAgICAnICAgICAgICBodG1sXFxuJyArXHJcbiAgICAgICcgICAgICB9XFxuJyArXHJcbiAgICAgICcgICAgfVxcbicgK1xyXG4gICAgICAnICB9XFxuJyArXHJcbiAgICAgICd9JyxcclxuICAgIGZpZWxkTmFtZTogJ21wb3N0RmluZCcsXHJcbiAgICBwYXJlbnRUeXBlTmFtZTogJ1F1ZXJ5JyxcclxuICAgIHZhcmlhYmxlczoge31cclxuICB9LFxyXG4gIHN0YXNoOiB7IG9wZXJhdGlvbjogJ2ZpbmQnIH1cclxufVxyXG4qL1xyXG5cclxuaW1wb3J0IHsgSUFwcFN5bmNSZXNvbHZlckV2ZW50LCBJQXBwU3luY0Nvbm5lY3Rpb24gfSBmcm9tICcuLi9hcHAtc3luYy50eXBlcyc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQXBwU3luY0RhdGFzb3VyY2Uge1xyXG5cclxuICAgIHByb3RlY3RlZCBwcm9wczogSUFwcFN5bmNSZXNvbHZlckV2ZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJQXBwU3luY1Jlc29sdmVyRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGZpbmQ/KCk6IElBcHBTeW5jQ29ubmVjdGlvbjtcclxuICAgIHByb3RlY3RlZCBmaW5kT25lPygpOiBhbnk7XHJcbiAgICBwcm90ZWN0ZWQgaW5zZXJ0T25lPygpOiBhbnk7XHJcbiAgICBwcm90ZWN0ZWQgaW5zZXJ0TWFueT8oKTogYW55O1xyXG4gICAgcHJvdGVjdGVkIHVwZGF0ZU9uZT8oKTogYW55O1xyXG4gICAgcHJvdGVjdGVkIHVwZGF0ZU1hbnk/KCk6IGFueTtcclxuICAgIHByb3RlY3RlZCBkZWxldGVPbmU/KCk6IGFueTtcclxuICAgIHByb3RlY3RlZCBkZWxldGVNYW55PygpOiBhbnk7XHJcbiAgICBwcm90ZWN0ZWQgZGVzdHJveU9uZT8oKTogYW55O1xyXG4gICAgcHJvdGVjdGVkIGRlc3RvcnlNYW55PygpOiBhbnk7XHJcbn0iXX0=