"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JompxGraphqlType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const appsync = require("@aws-cdk/aws-appsync-alpha");
/**
 * Extend GraphqlType to create a new datatype to include a new typeName property.
 */
class JompxGraphqlType extends appsync.GraphqlType {
    constructor(type, options) {
        var _b;
        super(type, options);
        this.typeName = '';
        this.typeName = (_b = options === null || options === void 0 ? void 0 : options.typeName) !== null && _b !== void 0 ? _b : '';
    }
    static objectType(options) {
        return new JompxGraphqlType(appsync.Type.INTERMEDIATE, options);
    }
    /**
     * Resolve a JompxGraphqlType with string type to a GraphqlType with actual type.
     */
    resolve(schemaTypes) {
        const objectType = schemaTypes.objectTypes[this.typeName];
        if (!objectType)
            throw Error(`Jompx: Type '${this.typeName}' not found for JompxGraphqlType! Add type to schema types`);
        const newGraphqlType = schemaTypes.objectTypes[this.typeName].attribute(this);
        return newGraphqlType;
    }
}
exports.JompxGraphqlType = JompxGraphqlType;
_a = JSII_RTTI_SYMBOL_1;
JompxGraphqlType[_a] = { fqn: "@jompx/constructs.JompxGraphqlType", version: "0.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbC10eXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcC1zeW5jL2dyYXBocWwtdHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNEQUFzRDtBQWdCdEQ7O0dBRUc7QUFDSCxNQUFhLGdCQUFpQixTQUFRLE9BQU8sQ0FBQyxXQUFXO0lBUXJELFlBQXNCLElBQWtCLEVBQUUsT0FBaUM7O1FBQ3ZFLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFIVCxhQUFRLEdBQVcsRUFBRSxDQUFDO1FBSWxDLElBQUksQ0FBQyxRQUFRLFNBQUcsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLFFBQVEsbUNBQUksRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFUTSxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQWlDO1FBQ3RELE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBU0Q7O09BRUc7SUFDSSxPQUFPLENBQUMsV0FBeUI7UUFFcEMsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLFVBQVU7WUFBRSxNQUFNLEtBQUssQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLFFBQVEsNERBQTRELENBQUMsQ0FBQztRQUV4SCxNQUFNLGNBQWMsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUUsT0FBTyxjQUFjLENBQUM7SUFDMUIsQ0FBQzs7QUF2QkwsNENBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBwc3luYyBmcm9tICdAYXdzLWNkay9hd3MtYXBwc3luYy1hbHBoYSc7XHJcbmltcG9ydCB7IElTY2hlbWFUeXBlcyB9IGZyb20gJy4vYXBwLXN5bmMudHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIEdvYUw6IEFsbG93IHNjaGVtYSB0byBpbmNsdWRlIFJlc29sdmFibGVGaWVsZCBkZWZpbnRpaW9uIHdpdGggc3RyaW5nIHR5cGUgaW5zdGVhZCBvZiBhY3R1YWwgdHlwZSB0byB3b3JrIGFyb3VuZCB0aGUgdHlwZSBjaGlja2VuIG9yIGVnZyBwcm9ibGVtLlxyXG4gKiBDcmVhdGUgYW4gaW1wbGVtZW50aW9uIGFzIGNsb3NlIHRvIG5hdGl2ZSBBcHBTeW5jIGFzIHBvc3NpYmxlLiBEbyBOT1QgZm9yY2UgYSBkZXZlbG9wZXIgdG8gbGVhcm4gbmV3IGN1c3RvbSBzeW50YXguXHJcbiAqIFNlZSBzZXRSZXNvbHZhYmxlRmllbGRUeXBlIG1ldGhvZCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cclxuICovXHJcblxyXG4vKipcclxuICogRXh0ZW5kIEdyYXBocWxUeXBlT3B0aW9ucyB0byBpbmNsdWRlIGEgbmV3IHR5cGVOYW1lIHBhcmFtZXRlci5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSm9tcHhHcmFwaHFsVHlwZU9wdGlvbnMgZXh0ZW5kcyBhcHBzeW5jLkdyYXBocWxUeXBlT3B0aW9ucyB7XHJcbiAgICByZWFkb25seSB0eXBlTmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogRXh0ZW5kIEdyYXBocWxUeXBlIHRvIGNyZWF0ZSBhIG5ldyBkYXRhdHlwZSB0byBpbmNsdWRlIGEgbmV3IHR5cGVOYW1lIHByb3BlcnR5LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEpvbXB4R3JhcGhxbFR5cGUgZXh0ZW5kcyBhcHBzeW5jLkdyYXBocWxUeXBlIHtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIG9iamVjdFR5cGUob3B0aW9ucz86IEpvbXB4R3JhcGhxbFR5cGVPcHRpb25zKTogYXBwc3luYy5HcmFwaHFsVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBKb21weEdyYXBocWxUeXBlKGFwcHN5bmMuVHlwZS5JTlRFUk1FRElBVEUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSB0eXBlTmFtZTogc3RyaW5nID0gJyc7XHJcblxyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHR5cGU6IGFwcHN5bmMuVHlwZSwgb3B0aW9ucz86IEpvbXB4R3JhcGhxbFR5cGVPcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIodHlwZSwgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy50eXBlTmFtZSA9IG9wdGlvbnM/LnR5cGVOYW1lID8/ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzb2x2ZSBhIEpvbXB4R3JhcGhxbFR5cGUgd2l0aCBzdHJpbmcgdHlwZSB0byBhIEdyYXBocWxUeXBlIHdpdGggYWN0dWFsIHR5cGUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZXNvbHZlKHNjaGVtYVR5cGVzOiBJU2NoZW1hVHlwZXMpOiBhcHBzeW5jLkdyYXBocWxUeXBlIHtcclxuXHJcbiAgICAgICAgY29uc3Qgb2JqZWN0VHlwZSA9IHNjaGVtYVR5cGVzLm9iamVjdFR5cGVzW3RoaXMudHlwZU5hbWVdO1xyXG4gICAgICAgIGlmICghb2JqZWN0VHlwZSkgdGhyb3cgRXJyb3IoYEpvbXB4OiBUeXBlICcke3RoaXMudHlwZU5hbWV9JyBub3QgZm91bmQgZm9yIEpvbXB4R3JhcGhxbFR5cGUhIEFkZCB0eXBlIHRvIHNjaGVtYSB0eXBlc2ApO1xyXG5cclxuICAgICAgICBjb25zdCBuZXdHcmFwaHFsVHlwZSA9IHNjaGVtYVR5cGVzLm9iamVjdFR5cGVzW3RoaXMudHlwZU5hbWVdLmF0dHJpYnV0ZSh0aGlzKTtcclxuICAgICAgICByZXR1cm4gbmV3R3JhcGhxbFR5cGU7XHJcbiAgICB9XHJcbn0iXX0=